<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>自然语言处理 on AI</title>
        <link>https://ai.programnotes.cn/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/</link>
        <description>Recent content in 自然语言处理 on AI</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Sun, 07 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ai.programnotes.cn/categories/%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>bilibili的index-1.9B模型解析</title>
        <link>https://ai.programnotes.cn/p/bilibili%E7%9A%84index-1.9b%E6%A8%A1%E5%9E%8B%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Sun, 07 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/bilibili%E7%9A%84index-1.9b%E6%A8%A1%E5%9E%8B%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;img src="https://ai.programnotes.cn/img/ai/744609d98719b46d341d1c9ff19b9258.png" alt="Featured image of post bilibili的index-1.9B模型解析" /&gt;&lt;p&gt;&lt;strong&gt;核心内容:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Index-1.9B模型包含base、pure、chat和character四个版本。&lt;/li&gt;
&lt;li&gt;预训练阶段，WSD的decay阶段加入高质量数据和指令数据能提升下游任务效果。&lt;/li&gt;
&lt;li&gt;SFT时加载预训练优化器参数有收益，Norm-Head能稳定预训练过程。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;源自&lt;/strong&gt; |  HZLin  Linsight   2024-07-07 12:35&lt;/p&gt;
&lt;p&gt;bilibili发布的Index-1.9B包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Index-1.9B base：在2.8T语料训练的基模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Index-1.9B pure：部分数据和base不同，其他相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Index-1.9B chat：基于base进行SFT和DPO后的模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Index-1.9B character：在chat的基础上用RAG+fewshots提供角色扮演的能力&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面看下细节。&lt;/p&gt;
&lt;h2 id=&#34;模型&#34;&gt;模型
&lt;/h2&gt;&lt;p&gt;（1）模型深度&lt;/p&gt;
&lt;p&gt;目前业界普遍的认知是模型深度比宽度对效果的影响更大（相同参数下）。对比层数分别为36层和9层，总参数都为1.01B的模型，结果如下图，36层模型（base）效果确实更好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/4a76ec82f2dac34aa982db49e24dc6ce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，相同模型参数量下，层数更多的模型会有更多的activation（与L * hidden size成正比），因此会需要更多显存。&lt;/p&gt;
&lt;p&gt;（2）Norm-Head&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;模型不同层的梯度尺度分布非常不同，最后一层 LM-Head 的梯度，占据了绝大部分的梯度大小。而词表的稀疏性让 LM-Head 层稳定性较低，影
响模型训练稳定性，进而影响模型性能表现，所以稳定的 LM-Head 层对于训练非常重要。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;参考Baichuan2使用Norm-Head，即对LM-Head进行Norm，能让训练更稳定。&lt;/p&gt;
&lt;p&gt;对比有无Norm-Head的模型，效果和Gradient Norm具体情况如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/58a2cb976f4b852727100de1c8d52383.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Norm-Head版本的效果更好，Gradient Norm整体变化也比较小，相对稳定（除了开头有个突升）。&lt;/p&gt;
&lt;h2 id=&#34;预训练&#34;&gt;预训练
&lt;/h2&gt;&lt;h3 id=&#34;数据&#34;&gt;数据
&lt;/h3&gt;&lt;p&gt;数据一些细节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总量2.8T&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中文：英文 = 4：5，代码占比 = 6%&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;书籍、百科、论文、STEM相关精选数据占比10%，这部分很重要&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体占比饼图如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/744609d98719b46d341d1c9ff19b9258.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;数据去重上做了一个事情：如果预先分局分段就有可能有一些重复没有被发现，因此这里采用支持任意长度、任意位置的文档内字符串去重。实现上基于https://github.com/google-research/deduplicate-text-datasets进行了优化。&lt;/p&gt;
&lt;p&gt;支持任意位置所能找到的难以发现的重复片段例子如下图。月份下拉框文字，重复了 15.6w 次，只能通过精准字符串去重识别&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/d28a602d4e38c5e0c8f6a837b9e298d0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;训练数据在packing的时候，重置了attention-mask和position-id。&lt;/p&gt;
&lt;h3 id=&#34;训练&#34;&gt;训练
&lt;/h3&gt;&lt;p&gt;（1）训练设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AdamW，beta_1=0.9，beta_2=0.95，eps=1e-8&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gradient clip=1.0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;weight decay=0.1&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）lr和scheduler&lt;/p&gt;
&lt;p&gt;训练的时候使用WSD的learning rate scheduler，分为了两阶段的训练：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;warmup 100步 + 全局混合数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;decay阶段，增大精选数据比例&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里把decay阶段设得比较长，最大lr为5e-4，decay结束时减小到1%即5e-6，整个decay过程训练了400B数据。&lt;/p&gt;
&lt;p&gt;这里还用0.1B的模型，分别用Cosin、Linear和WSD训练1T的数据，训练过程的loss和最终模型的效果对比如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/106adbe7f96ed004bf0c33c174bf09f6.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;几个发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最终三种scheduler的valid loss都收敛到同一个水平&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WSD在S阶段的valid loss比较高，而在decay阶段会快速下降&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;评测指标整体没有差太多&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（3）decay阶段数据的配合&lt;/p&gt;
&lt;p&gt;从上面的实验发现WSD在decay阶段的loss会快速下降，那么在这个阶段加入更多的高质量精选数据应该有更好的效果。&lt;/p&gt;
&lt;p&gt;为了验证这个想法，用以下四种配置做实验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cosine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WSD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cosine + 后10%加入更多精选数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WSD + 后10%进入decay阶段，并加入更多精选数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;评测结果如下，确实是在decay阶段增加高质量数据的WSD效果最好。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/98509b6b03b01c860505e7e3e9b59b08.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;（4）预训练阶段加入指令数据&lt;/p&gt;
&lt;p&gt;在decay阶段还做了一个实验，验证加入指令数据对最终预训练模型效果的影响。&lt;/p&gt;
&lt;p&gt;为了验证效果，训了两个版本的模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;index-1.9b-ablation-pure：Decay 阶段自然文本数据，精选数据做重新放入增加浓度(书籍、论文、百科、专业等类别)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;index-1.9b-ablation-boost：在pure基础上，额外加入占比7%的指令数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在MMLU的效果对比如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/30bc1fcc07d97fb6c03ada05b572cfbe.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在decay阶段增加指令数据能明显提升下游任务指标。&lt;/p&gt;
&lt;h2 id=&#34;对齐&#34;&gt;对齐
&lt;/h2&gt;&lt;h3 id=&#34;sft&#34;&gt;SFT
&lt;/h3&gt;&lt;p&gt;（1）数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用10M中英数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用奖励模型打分进行筛选清洗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参照了主流的聚类增强多样性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对缺少指令数据的任务，构造/标注进行补充&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）训练&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;lr=1e-5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用 system-query-response 格式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实验还发现，SFT时，加载预训练优化器的参数，并加入部分预训练语效果最好。预训练语料和SFT数据response的token数占比为4:6。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/dc0a6fae50b70037bf50b6aca6ffa646.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;dpo&#34;&gt;DPO
&lt;/h3&gt;&lt;p&gt;这里开发人员认为评价标准偏判别而非枚举的任务通过偏好学习可以取得最大的收益，因此DPO主要针对写作类、指令遵循和安全进一步对齐。&lt;/p&gt;
&lt;p&gt;此外在构造安全类数据的时候，发现通过prompt让模型生成拒答回复，比人写好，原因是人工构造的拒答样本在 SFT 模型中的 ppl 过高，如果强行对齐又会导致拒答率较高，带来灾难性遗忘。&lt;/p&gt;
&lt;p&gt;lr =  1e-6
scheduler = cosine
epoch = 1
dpo 超参beta = 1&lt;/p&gt;
&lt;p&gt;评测结果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e2a7c3936854e8226d606a5d7d130252.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;小结&#34;&gt;小结
&lt;/h2&gt;&lt;p&gt;Index-1.9B验证了几个事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在WSD的decay阶段加入高质量预训练数据，以及指令数据，对下游任务效果有明显提升。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SFT时加载预训练优化器参数有收益。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Norm-Head能稳定预训练过程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读到这了，来一发点赞收藏关注吧~&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference
&lt;/h2&gt;&lt;p&gt;1】https://github.com/bilibili/Index-1.9B/blob/main/Index-1.9B%20%E6%8A%80%E6%9C%AF%E6%8A%A5%E5%91%8A.pdf&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Introducing Index-1.9B</title>
        <link>https://ai.programnotes.cn/p/introducing-index-1.9b/</link>
        <pubDate>Fri, 14 Jun 2024 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/introducing-index-1.9b/</guid>
        <description>&lt;p&gt;核心内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哔哩哔哩技术团队发布了Index-1.9B系列轻量级开源语言模型，包括基座模型、纯净模型、对话模型和角色扮演模型。&lt;/li&gt;
&lt;li&gt;通过模型结构优化（如Norm-Head和调整模型形状）、学习率调度和数据配合等方式，提升了模型的预训练性能。&lt;/li&gt;
&lt;li&gt;通过SFT和DPO对齐，以及RAG技术，增强了模型的对话能力、指令遵循能力和角色扮演能力。
&lt;strong&gt;源自&lt;/strong&gt; |  Index team  哔哩哔哩技术   2024-06-14 12:00&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;strong&gt;简介&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;大家好，今天我们很高兴首次发布Index系列模型中的轻量版本：Index-1.9B系列&lt;/p&gt;
&lt;p&gt;本次开源的Index-1.9B 系列包含以下模型： &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Index-1.9B base&lt;/strong&gt; : 基座模型，具有 19亿 非词嵌入参数量，在2.8T 中英文为主的语料上预训练，多个评测基准上与同级别模型比处于领先. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Index-1.9B pure&lt;/strong&gt; : 基座模型的对照组，与base具有相同的参数和训练策略，不同之处在于我们严格过滤了该版本语料中所有指令相关的数据，以此来验证指令对benchmark的影响（详见2.3章节）. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Index-1.9B chat&lt;/strong&gt; : 基于index-1.9B base通过SFT和DPO对齐后的对话模型，我们发现由于预训练中引入了较多定向清洗对话类语料，聊天的&lt;strong&gt;趣味性&lt;/strong&gt;明显更强 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Index-1.9B character&lt;/strong&gt; : 在SFT和DPO的基础上引入了RAG来实现&lt;strong&gt;fewshots角色扮演定制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;目前，我们已在GitHub（https://github.com/bilibili/Index-1.9B），HuggingFace（&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/IndexTeam&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://huggingface.co/IndexTeam&lt;/a&gt;）上开源。期待听到你们的使用反馈！&lt;/p&gt;
&lt;h2 id=&#34;模型基本性能&#34;&gt;&lt;strong&gt;模型基本性能：&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/6413d872986cb0d6afcf5862af241130.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;注: 一些模型采用了report的分数，我们做了注释；其中MiniCPM[1]-Decay为官方放出的history里注明的280000步的ckpt。&lt;/p&gt;
&lt;h2 id=&#34;输出示例&#34;&gt;&lt;strong&gt;输出示例&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/a6f8bd9eb9672ed1f3f04eeb96418bfa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/6597d969969352c35422a225b39fa1ef.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;预训练优化&#34;&gt;&lt;strong&gt;预训练优化&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;注：下列章节中的实验指标分数，是评测Ceval(5-shot), CMMLU(5-shot), MMLU(5-shot), Arc-C(0-shot),  Arc-E(0-shot), Hellaswag(0-shot)，求平均得到平均指标分数。我们以此作为观察模型表现的指标，进行消融实验。&lt;/p&gt;
&lt;h3 id=&#34;模型结构的优化&#34;&gt;&lt;strong&gt;模型结构的优化&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;稳定的LM-Head层: Norm-Head&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模型不同层的梯度尺度分布非常不同，&lt;strong&gt;最后一层LM-Head的梯度，占据了绝大部分的梯度大小&lt;/strong&gt;。而词表的稀疏性让LM-Head层稳定性较低，影响模型训练稳定性，进而影响模型性能表现，所以稳定的LM-Head层对于训练非常重要。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/626f5e913b3a189b94c2b07cd38f37d1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;模型不同层的梯度尺度分布观察，LM-Head层梯度占据绝大部分&lt;/p&gt;
&lt;p&gt;我们认为Norm-Head&lt;a class=&#34;link&#34; href=&#34;%e5%8d%b3%e5%af%b9LM-Head%e5%b1%82%e8%bf%9b%e8%a1%8cNorm%ef%bc%8c%e5%8f%af%e4%bb%a5%e5%8a%a8%e6%80%81%e7%9a%84%e7%bc%a9%e6%94%beLM-Head%e5%b1%82%e5%a4%a7%e5%b0%8f&#34; &gt;2&lt;/a&gt;，有利于更稳定的训练，我们引入此机制并做实验观察，实验结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Norm-Head版本稳定高于Base版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;观察Gradient Norm，Norm-Head版本的绝对值更高，初始有一个快速上升，整体相对Base的上扬幅度更低&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实验设置：基于1B的模型训练1T数据，Cosine学习率，Max-LR为2e-4，对照组添加Norm-Head。我们在0.1B规模上观察到了同样的表现&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e2a13b0020deb7962cd4b3c0ca06c1fb.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/994e42d999bde78281aae7a675ebc740.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;左：norm-head指标对比，右：norm-head的gradient norm对比&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;矮胖 or 高瘦？模型的形状也会影响性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;模型应该设置多少层，瘦点好还是胖点好，还是没影响？OpenAI 著名的Scaling Law[3]文章，指出模型大小是影响模型性能的最核心因素，形状无关；而DeepMind在前LLM的BERT时代，曾指出高瘦的模型形状相对于矮胖，在下游微调任务上GLUE任务集性能更好[4]。带着这样的疑问，我们做了固定参数大小(Flops也等价)，不同层数的实验。&lt;/p&gt;
&lt;p&gt;我们基于实验观察，&lt;strong&gt;同样大小前提下，适当增加深度指标更好&lt;/strong&gt;。但有两个注意问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;显存增加的问题。同参数下，增加层数(矮胖-&amp;gt;高瘦)会增加显存。这是因为训练中Activation占大头，Activation显存占用与(层数L *hidden_size)正比，而参数量&amp;amp;FLOPS和(层数L *hidden_size *hidden_size)正比。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;层数加深到多大的程度收益微弱？这个我们还未充分实验，留待以后进一步探索。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实验设置: Base 36层， 对照组9层，维持模型参数基本一致，均为1.01B non-emb参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/9c76864ed0d4503b21be2ef9facba75f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;base和更宽更浅的模型对比&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习率Matters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在LLM训练中，&lt;strong&gt;朴素的设定常常产生深刻的影响，学习率设定就是典型&lt;/strong&gt;。我们基于实践发现，学习率的设定会对模型的训练性能产生非常深刻的影响。学习率调度和数据配合，更能让模型性能再获突破。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习率大小的影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;仅仅改变学习率大小，能够让模型性能产生稳定而显著的差别，合适的更大的学习率有利于模型的表现。&lt;/p&gt;
&lt;p&gt;实验设置：基于1B的模型训练1T数据，Cosine学习率，其中Base Max-LR为2e-4，对照组Max LR 为 5e-4&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/5a0054ee6e9427d11d3aa6b1e4d7456f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;仅仅改变学习率大小，能够让模型性能产生稳定而显著的差别&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同学习率调度有何影响？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cosine, Linear和WSD&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cosine学习率调度是大多数LLM的训练默认选择，但是否是唯一解，其他学习率调度影响如何？&lt;/p&gt;
&lt;p&gt;基于0.1B的模型我们分别使用 Cosine, Linear和WSD学习率调度，训练1T的数据，可以发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;三种学习率曲线的valid loss最终收敛到一起&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WSD的Stable阶段Loss偏高，进入Decay阶段则loss快速下降&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指标评测上基本接近&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以发现，不同的学习率调度，&lt;strong&gt;只要学习率收敛尺度一致，最终loss和指标都是接近的&lt;/strong&gt;，这就为学习率调度和数据配合打下了基础。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e9dbe041881551eb9f4d639edfc25985.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e57d6bb5e24469596c83f11ac2af6ce8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;左：0.1B模型学习率调度实验：Cosine, Linear, WSD的学习率和loss曲线&lt;/p&gt;
&lt;p&gt;右：0.1B模型学习率调度实验：Cosine, Linear, WSD的评测指标相近&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;学习率如何和数据配合？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们有如下初步假设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WSD学习率在Decay阶段有一个Loss快速下降的过程，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模型学习后期加入更多精选数据有利于模型效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两者是否能结合达到最佳的效果？我们做了如下消融实验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;cosine: Cosine学习率，无数据调整&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wsd: WSD学习率，无数据调整&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cosine+quality: Cosine学习率，后10%加入更多精选数据配比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wsd+quality: WSD学习率，后10% 进入Decay阶段，并加入和cosine+quality同样的精选数据配比&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们发现，&lt;strong&gt;学习率和数据配合可以让模型性能获得突破&lt;/strong&gt;：WSD学习率调度下，Decay阶段加入高质量数据，可以获得最佳效果。&lt;/p&gt;
&lt;p&gt;其中cosine+quality比无数据调整，指标略低，我们猜测可能有数据适应过程，且cosine末期学习率太低。我们会在未来补充更多的实验来验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/c161844d0d2183079a483f57959c82fc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;不同学习率和数据策略组合的实验&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预训练加入指令对benchmark的影响&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在预训练中是否加入指令是个值得讨论的地方，但目前公开的讨论较少，我们有如下问题想进行实验探究：&lt;/p&gt;
&lt;p&gt;1.  加入指令是否能大幅提高benchmark表现，从而变成打榜”优等生“&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; 能提高多少？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/dabf92a1fcdfe980e3974adc7a281b6c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;说明: 天工技术报告[5]（https://arxiv.org/pdf/2310.19341）中指出部分模型，将GSM8K训练集/测试集加入预训练但未明确阐述&lt;/p&gt;
&lt;p&gt;我们做了相应的探索，设置两组实验，Stable结束后的Decay阶段训练5w步，细节设定如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**index-1.9b-ablation-pure:**Decay阶段自然文本数据，精选数据做重新放入增加浓度（书籍、论文、百科、专业等类别）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**index-1.9b-ablation-boost:**实验组在Decay阶段自然文本数据的基础上，额外加入占比7%的指令（唯一变量）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MMLU对比曲线如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/4f823ee1e5eb62a5221340ee430c570b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以观察到：&lt;/p&gt;
&lt;p&gt;1.  进入Decay阶段后，指标均会大幅上升&lt;/p&gt;
&lt;p&gt;2. &lt;strong&gt;额外添加7%的指令，能明显提升指标&lt;/strong&gt;，MMLU指标的差距在7.x个百分点&lt;/p&gt;
&lt;p&gt;全面的指标评测如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/d65b905f203ee60e53710cc221c4e564.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;注: 此为实验对比版本，非最终release版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其他观察：训练中的涌现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;训练1.9B模型过程中，在还未Decay的Stable阶段，观测到了一次模型性能的突涨:&lt;/p&gt;
&lt;p&gt;1.  前1T数据: Ceval / MMLU 一直在27.x / 26.x 附近震荡&lt;/p&gt;
&lt;p&gt;2.  1T ~ 1.2T: Ceval / MMLU 快速上涨到 36.x / 33.x，这个指标已经超过了一批7B的模型&lt;/p&gt;
&lt;p&gt;我们还不能很好解释原因，可能得益于高质量数据和高学习率的稳定，让模型Decay之前已获得了不错性能，这个留待以后进行进一步的研究。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e7979c610c481a200b70670e4ea6806d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;注: Stable阶段的MMLU分数曲线，可以明显观察到训练至1T~1.2T区间指标迅速上涨（语料无变动）&lt;/p&gt;
&lt;h2 id=&#34;对齐讨论&#34;&gt;&lt;strong&gt;对齐讨论&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;为了进一步对齐人类的偏好，我们基于Index 1.9b base model进行了SFT和DPO训练。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SFT&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数据：我们收集了10M以上的高质量中英文指令数据，参照了主流的聚类增强多样性和奖励模型打分策略对数据进行清洗和筛选，筛选出高质量且多样的子集；同时，对sft表现欠缺的指令任务，构造和标注了相应数据。最终得到不超过10万条的高质量指令数据集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;训练：chat模型采用system-query-response的格式。优化器和训练参数和预训练阶段保持一致，采用1e-5学习率。packing方式和预训练大体保持一致，采用crossdoc拼接batch的方式以提高训练效率，不同之处在于sft阶段我们会mask掉非response部分不参与loss计算。我们实验了是否&lt;strong&gt;加载预训练优化器&lt;/strong&gt;参数和是否按一定比例&lt;strong&gt;replay预训练语料&lt;/strong&gt;。最终发现加载参数并且保持sft指令参与loss计算的tokens占比在60%是较优设置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统指令跟随：通过调整系统指令，能够引导模型给出不同设定和风格的回答，从而实现角色扮演，语言风格转化等能力。具体的示例见附录的输出样例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;附：sft实验的内部评测结果（3分满分）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/a08bc87939774f3670658785cf7671b3.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DPO&lt;/strong&gt;&lt;br&gt;
DPO阶段[6]，我们主要针对写作类、指令遵循和安全进一步对齐。一方面，对于写作类任务，回答具备开放性，单一的目标文本并不一定是最优的回答，模型在DPO优化中能学会优劣的标准，从而生成更符合人类偏好的回答；另一方面，对于指令遵循和安全性任务，通过学习对比chosen和reject回答，模型能掌握指令的要求以及拒答的类型，从而更进一步对齐人类偏好，一个比较好的例子是指令遵循中的字数控制。总的来说，我们认为&lt;strong&gt;评价标准偏判别而非枚举的任务&lt;/strong&gt;通过偏好学习可以取得最大的收益。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据：针对生成类数据，我们从sft数据集中筛选出偏生成写作类的prompt，用我们自训练的奖励模型对模型生成的回答进行打分，然后整理成pair对；针对指令遵循类的数据，我们通过人工构造和标注了对应的pair数据；针对安全类数据，我们尝试了两种方案，示例如下表所示。第一种方案是人工编写了一个拒答集合，从该集合中抽取拒答话术作为chosen，SFT模型生成的回答作为reject；第二种方案是调整系统指令，让我们的SFT模型针对问题生成拒答作为chosen，reject保持。在DPO优化中，我们发现第二种方案可以让模型更好的针对安全问题学会拒答，原因是人工构造的拒答样本在sft模型中的ppl过高，如果强行对齐又会导致拒答率较高，带来灾难性遗忘。因此我们采用了第二种方案。最终，我们一共整理构造了超过10w条高质量的pair数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/65d62b1020bb801f6379cfd6a3280ef2.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;训练：与SFT相同的训练格式。学习率设置为1e-6，调度器采用cosine，损失函数中的超参数beta设置为0.1。训练进行了1个epoch。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;角色扮演&#34;&gt;&lt;strong&gt;角色扮演&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们收集了大量网络公开数据中的台词剧本和人物设定数据，从中抽取角色对话，利用角色奖励模型进行了筛选，并清洗了数据集，得到了8万条左右的高质量角色对话数据集，覆盖一千多个角色。我们利用RAG检索与当前对话相关的角色过往台词片段，作为参考拼入prompt，最终得到训练数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;评估结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;采用角色扮演领域的权威benchmark CharacterEval进行评估，该评测集从角色一致性、对话能力、角色扮演吸引力多个粒度进行评测，我们的1.9b模型整体均分排名第九，显著优于其他同量级模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/64c69c7b75c692fc5b16db36ea444233.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结果展示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户可以通过上传符合要求的角色对话语料实现few shots角色定制&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/10833c04ce42eb6a52dde599d009fef2.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;局限性&#34;&gt;&lt;strong&gt;局限性&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;我们在模型训练的过程中，利用合规性检测等方法，最大限度地确保使用数据的合规性。虽然我们已竭尽全力确保在模型训练中使用数据的合法性，但鉴于模型的复杂性和使用场景的多样性，仍然可能存在一些尚未预料到的潜在问题。因此，对于任何使用开源模型而导致的风险和问题，包括但不限于数据安全问题，因误导、滥用、传播或不当应用带来的风险和问题，我们将不承担任何责任。&lt;/p&gt;
&lt;p&gt;受限于模型参数量，模型的生成可能存在事实错误或指令理解不到位的情况，我们后续会尝试通过对齐和rag等技术方向的迭代来优化此类问题。&lt;/p&gt;
&lt;p&gt;查看详细技术报告：&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/bilibili/Index-1.9B&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/bilibili/Index-1.9B&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;&lt;strong&gt;Reference&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;1.  Hu S, Tu Y, Han X, et al. Minicpm: Unveiling the potential of small language models with scalable training strategies[J]. arXiv preprint arXiv:2404.06395, 2024.&lt;/p&gt;
&lt;p&gt;2.  Yang A, Xiao B, Wang B, et al. Baichuan 2: Open large-scale language models[J]. arXiv preprint arXiv:2309.10305, 2023.&lt;/p&gt;
&lt;p&gt;3.  Kaplan J, McCandlish S, Henighan T, et al. Scaling laws for neural language models[J]. arXiv preprint arXiv:2001.08361, 2020.&lt;/p&gt;
&lt;p&gt;4.  Tay Y, Dehghani M, Rao J, et al. Scale efficiently: Insights from pre-training and fine-tuning transformers[J]. arXiv preprint arXiv:2109.10686, 2021.&lt;/p&gt;
&lt;p&gt;5.  Wei T, Zhao L, Zhang L, et al. Skywork: A more open bilingual foundation model[J]. arXiv preprint arXiv:2310.19341, 2023.&lt;/p&gt;
&lt;p&gt;6.  Rafailov R, Sharma A, Mitchell E, et al. Direct preference optimization: Your language model is secretly a reward model[J]. Advances in Neural Information Processing Systems, 2024, 36.&lt;/p&gt;
&lt;p&gt;作者丨Index team&lt;/p&gt;
&lt;h2 id=&#34;往期精彩指路&#34;&gt;&lt;strong&gt;往期精彩指路&lt;/strong&gt;
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;amp;mid=2247498723&amp;amp;idx=1&amp;amp;sn=a13fdc862f3cc9e4832219cad27e7bcf&amp;amp;chksm=cf2f3ec6f858b7d02c9afdf02f4d955d46e36d6bec8f441d91bf1c38f7b1a166aecdb24fcb17&amp;amp;scene=21#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;万字长文解析：大模型需要怎样的硬件算力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;amp;mid=2247495018&amp;amp;idx=1&amp;amp;sn=2845aaddc80d7fd08ad7cfdf879c782e&amp;amp;chksm=cf2f284ff858a15943ea5df90ea476245d1c67da5265622bdc29ecfd57ea0128f607e89a8871&amp;amp;scene=21#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;哔哩哔哩大规模AI模型推理实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://mp.weixin.qq.com/s?__biz=Mzg3Njc0NTgwMg==&amp;amp;mid=2247484579&amp;amp;idx=1&amp;amp;sn=e08a24e12c12a00f6a2666e3e0ec32aa&amp;amp;chksm=cf2cc186f85b4890269e0008c633e1113e46522af9d5b7ff8cec455597a3fcbd06a795adff20&amp;amp;scene=21#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;B站开源自研动漫超分辨率模型， 助力动漫UGC视频高清化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;amp;action=getalbum&amp;amp;album_id=3289447926347317252#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;通用工程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;amp;action=getalbum&amp;amp;album_id=2390333109742534656#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;大前端&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;amp;action=getalbum&amp;amp;album_id=3297757408550699008#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;业务线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;amp;action=getalbum&amp;amp;album_id=2329861166598127619#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;大数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;amp;action=getalbum&amp;amp;album_id=2782124818895699969#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg3Njc0NTgwMg==&amp;amp;action=getalbum&amp;amp;album_id=2532608330440081409#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;多媒体&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
