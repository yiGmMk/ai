<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>云计算 on AI</title>
        <link>https://ai.programnotes.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/</link>
        <description>Recent content in 云计算 on AI</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Fri, 12 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://ai.programnotes.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>函数计算进化之路：AI Sandbox 新基座</title>
        <link>https://ai.programnotes.cn/p/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AFai-sandbox-%E6%96%B0%E5%9F%BA%E5%BA%A7/</link>
        <pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E8%BF%9B%E5%8C%96%E4%B9%8B%E8%B7%AFai-sandbox-%E6%96%B0%E5%9F%BA%E5%BA%A7/</guid>
        <description>&lt;img src="https://ai.programnotes.cn/img/ai/547d3cfea841fce261b5aa65998ddf7e.jpg" alt="Featured image of post 函数计算进化之路：AI Sandbox 新基座" /&gt;&lt;p&gt;&lt;strong&gt;核心内容点1&lt;/strong&gt;: 函数计算通过神龙裸金属和MicroVM架构实现硬件与内核级安全隔离，为AI Sandbox提供坚实基础。&lt;br&gt;
&lt;strong&gt;核心内容点2&lt;/strong&gt;: 引入会话亲和与会话隔离能力，支持有状态的AI Agent应用，解决状态管理和多租户隔离问题。&lt;br&gt;
&lt;strong&gt;核心内容点3&lt;/strong&gt;: 创新使用快照技术和PolarFS实现本地临时存储与持久化共享存储的高效安全解决方案。
千风Serverless 2025-09-12 18:00&lt;/p&gt;
&lt;h2 id=&#34;引言定义问题与趋势&#34;&gt;&lt;strong&gt;引言：定义问题与趋势&lt;/strong&gt;
&lt;/h2&gt;&lt;h3 id=&#34;ai-sandbox-的崛起&#34;&gt;AI Sandbox 的崛起
&lt;/h3&gt;&lt;p&gt;计算领域正在经历一场革命性的转变。我们正从简单的请求-响应模型，迈向一个由自主的、以目标为导向的 AI Agent 定义的新时代。这些 Agent 不再仅仅是被动地执行指令，而是能够进行推理、规划、并拥有记忆，以代表用户完成复杂的多步骤任务。&lt;/p&gt;
&lt;p&gt;然而，这种强大的自主性也带来了前所未有的安全风险。如何在一个安全可控的环境中执行 AI 驱动生成的业务逻辑？答案就是 AI Sandbox。&lt;/p&gt;
&lt;p&gt;AI Sandbox 是一个被严格控制的隔离环境，它允许 AI Agent 在其中安全地执行代码、与应用交互和访问资源，而不会危及主机系统或泄露敏感数据。其核心价值在于，它为创新提供了一个“安全环境”，在释放 AI 强大潜力的同时，有效规避了潜在的安全风险，是推动 Agent 技术走向成熟和商业化应用不可或缺的基础设施。&lt;/p&gt;
&lt;h3 id=&#34;运行时面临的关键挑战&#34;&gt;运行时面临的关键挑战
&lt;/h3&gt;&lt;p&gt;AI Agent 这一新兴工作负载范式，对底层的运行时环境提出了三个根本性的、前所未有的技术挑战：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;隔离与安全 (Isolation &amp;amp; Security)：这是首要且不容妥协的要求。执行由大语言模型（LLM）动态生成且不可信的代码，引入了巨大的安全漏洞，包括沙箱逃逸、代码注入、权限提升和未经授权的系统访问。传统的软件沙箱技术在应对这种动态、复杂且可能具有对抗性的 AI 工作负载时，正变得越来越力不从心，频繁出现的高危漏洞证明了这一点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;状态管理与成本 (State Management &amp;amp; Cost)：AI Agent 的工作模式是对话式、持续性的，这意味着每个 Agent 都需要一个持久的、有状态的会话来维持上下文、记忆和交互式环境。这与传统的基础设施模式产生了尖锐的冲突。为每一个潜在的用户会话（可能是数百万个）都预置一个长期运行的虚拟机（VM），将导致惊人的闲置资源成本和巨大的运维负担。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可扩展性与运维 (Scalability &amp;amp; Operations)：Agent 应用的流量往往是突发且不可预测的。基础设施必须能够瞬时、动态地扩展以应对峰值，并在空闲时迅速缩减以节约成本。然而，从零开始构建并维护一个既安全隔离又具备弹性伸缩能力的沙箱环境，需要极其专业的 DevOps 知识和大量的人力投入，这对大多数初创公司和开发团队而言都是一个难以逾越的障碍。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这三大挑战共同指向一个结论：AI Agent 的兴起催生了一种全新的、独特的云工作负载类型。它既不完全符合传统 IaaS（对于零散、突发的使用场景而言过于昂贵和笨重）的模式，也打破了第一代 FaaS（函数即服务，因其无状态和较弱的隔离保证而无法满足需求）的设计假想。市场迫切需要一种新型运行时——它必须兼具&lt;strong&gt;虚拟机的状态化和隔离性&lt;/strong&gt;与&lt;strong&gt;Serverless 的经济性和弹性&lt;/strong&gt;。这正是阿里云函数计算（Function Compute, FC）架构演进所要解决的核心问题。&lt;/p&gt;
&lt;h2 id=&#34;为何函数计算是理想的起点&#34;&gt;&lt;strong&gt;为何函数计算是理想的起点&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;在深入探讨函数计算为 AI Sandbox 提供的原生解决方案之前，我们必须首先理解其底层架构所带来的独特基础优势。这些优势并非后期添加的功能，而是根植于平台设计的基因之中，使其成为构建安全、经济、高效沙箱的理想起点。&lt;/p&gt;
&lt;h3 id=&#34;始于物理隔离的底层架构&#34;&gt;始于物理隔离的底层架构
&lt;/h3&gt;&lt;p&gt;安全性是 AI Sandbox 的基石，而函数计算的安全性始于最底层——物理硬件。其独特的**“神龙裸金属 + MicroVM 安全容器”**架构，为用户提供了一个从硬件到应用运行时的端到端、纵深防御安全体系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;神龙裸金属服务器：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在神龙裸金属服务器上，来自多个不同租户的函数实例以安全隔离的方式，高效地共同运行在同一物理硬件之上。其卓越的安全性源于神龙架构在硬件层面对虚拟化技术的革命性重塑，从而在共享硬件上实现了租户间的“硬隔离”。
其核心在于，神龙架构通过&lt;strong&gt;自研的 MOC 芯片&lt;/strong&gt;，将网络、存储、虚拟化等原本属于Hypervisor（虚拟机监视器）的复杂功能&lt;strong&gt;从主 CPU 卸载到了独立的专用硬件&lt;/strong&gt;上。
这一设计带来了根本性的安全优势：运行在主 CPU 上的 Hypervisor 变得极其轻薄，其攻击面被大大缩减。不同租户的函数实例（Guest）与平台的管控逻辑（Host）之间形成了一道由&lt;strong&gt;硬件定义的、无法逾越的隔离边界&lt;/strong&gt;
。这种架构从根本上消除了传统软件 Hypervisor 可能存在的逃逸漏洞风险，确保了在同一台物理服务器上的不同租户之间，享有业界顶级的硬件级安全保障。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MicroVM 安全容器：****在神龙架构提供的坚实租户间隔离基础上，函数计算采用 MicroVM 安全容器为每一个函数实例提供一个独立的、受保护的执行沙箱。这并非共享主机内核（Host Kernel）的普通 Docker 容器，而是基于轻量级虚拟化技术（MicroVM）的独立执行环境。其最核心的安全特性在于：每一个函数实例，都运行在一个拥有独立、精监客户机内核（Guest Kernel）的微型虚拟机中。这意味着，AI Agent 生成和执行的代码被完全封装在自己的内核空间里。任何代码层面的漏洞、恶意攻击或不稳定行为，其影响范围都被严格限制在该实例自身的、短暂的内核之内。它既无法访问或影响主机内核，也无法触及在同一台物理机上运行的其他租户实例的内核。这种内核级别的强隔离，为执行行为不可完全预测的 AI 代码提供了理想的“内隔离”沙箱环境，其冲击范围被牢牢锁定在即用即毁的单个实例内部。
这种“物理隔离保障租户间安全，安全容器保障租户内隔离”的双重隔离模型，构建了一个远比单一依赖 Hypervisor 的传统虚拟化方案更为坚固的安全壁垒，为运行不可信的 AI 生成代码提供了前所未有的信心。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;serverless-时代的红利&#34;&gt;Serverless 时代的红利
&lt;/h3&gt;&lt;p&gt;除了坚不可摧的安全基础，函数计算作为 Serverless 平台，为 AI Agent 场景带来了颠覆性的经济和运维优势。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;极致的成本效益：AI Agent 的用户活跃度通常是突发和间歇性的。如果采用传统的预置服务器模式，企业将为大量的闲置时间付费。研究表明，超过 70% 的服务器资源处于未被充分利用的状态。函数计算的按需付费模型（精确到毫秒）则彻底改变了这一局面。您只需为沙箱实际运行的计算时间付费，当没有请求时，不产生任何计算费用，资源利用率可达 100%。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;零运维负担：平台完全托管了底层基础设施的生命周期管理，包括资源调配、系统补丁、安全加固、容量规划和弹性伸缩。这意味着您的开发团队可以从繁琐复杂的 DevOps 工作中解放出来，将全部精力聚焦于构建 Agent 的核心能力和业务逻辑，从而极大地缩短产品上市时间。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数计算的这些基础优势，直接回应了引言中提出的核心挑战。它以一种“无妥协”的姿态，同时解决了安全和成本这两个构建 AI Sandbox 时最令人头疼的问题。&lt;/p&gt;
&lt;h2 id=&#34;函数计算还缺什么&#34;&gt;&lt;strong&gt;函数计算还缺什么？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;尽管函数计算拥有强大的底层优势，但在其演进的早期阶段，和其他 FaaS 平台一样，也面临着一个核心的架构性矛盾：&lt;strong&gt;平台设计的“无状态”本质与 AI Sandbox 需求的“有状态”特性之间的冲突&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;短暂的执行-vs-持久的环境&#34;&gt;短暂的执行 vs. 持久的环境
&lt;/h3&gt;&lt;p&gt;传统的 FaaS 平台被设计为处理&lt;strong&gt;无状态&lt;/strong&gt;的、短暂的事件。每一次函数调用都被视为一个独立的、全新的开始，执行环境在调用结束后随时可能被回收，不保留任何上下文信息。然而，一个 AI Sandbox 的工作流程恰恰相反，它本质上是&lt;strong&gt;有状态&lt;/strong&gt;的。Agent 需要在一个连续的会话中加载代码库、安装依赖、在内存中维护上下文、在文件系统中读写文件，并与用户进行多轮交互。这种根本性的不匹配，是第一代 Serverless 架构应用于此场景时最大的障碍。&lt;/p&gt;
&lt;h3 id=&#34;e2b-项目的实践与启示&#34;&gt;E2B 项目的实践与启示
&lt;/h3&gt;&lt;p&gt;开源项目 &lt;strong&gt;E2B&lt;/strong&gt; 是一个广受欢迎的 AI Sandbox 框架。我们将其应用层的 Jupyter 以及 Envd 移植到阿里云函数计算的早期尝试（https://github.com/aliyun-fc/e2b-on-aliyun-fc）中，探索出静态预留实例的模式，该模式将函数与 Sandbox 一一对应，将函数的“最小实例数”和“最大实例数”都设置为 1，可以强制平台为一个函数长期保留一个运行中的实例，这个实例不会因为空闲而被回收，从而实现了一种伪状态化的“会话粘性”。&lt;/p&gt;
&lt;p&gt;这次实践将函数计算作为 E2B 的 Infra 层，成功验证了函数计算底层环境的可行性，但也清晰地暴露了上述所有局限。它让平台和社区都深刻地认识到：仅仅“让实例活得更久”是远远不够的。真正的挑战在于，如何在一个庞大的、动态的实例池中，智能地管理成千上万个有状态会话的生命周期，并将属于特定用户的请求精确地路由到其对应的实例上。&lt;/p&gt;
&lt;p&gt;这种探索过程中的变通方案，其失败之处恰恰揭示了通往真正解决方案的道路。它证明了市场需要的不是一个配置技巧，而是一个平台级的、原生的&lt;strong&gt;会话管理和路由层&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;方案的局限性&#34;&gt;方案的局限性
&lt;/h3&gt;&lt;p&gt;尽管这种方法在小规模验证中看似可行，但它很快就暴露出一系列致命的局限性，使其无法成为一个可持续、可扩展的解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;高昂的管理成本：开发者需要为每个用户或每个会话手动创建和管理一个独立的、配置了静态实例的函数。这违背了 Serverless 简化运维的初衷，带来了巨大的管理复杂性。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可扩展性的噩梦：这种模式完全破坏了 Serverless 自动伸缩的核心价值。当用户规模从十增长到一万时，平台无法自动扩展。开发者需要手动或通过复杂的外部编排逻辑来管理这一万个“永久在线”的函数，这在操作上是极其脆弱和不可行的。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;经济效益的丧失：静态预留模式需要函数始终保持一个实例存活来模拟“会话粘性”，这种使用模式完全抵消了 Serverless 按需付费的最大成本优势。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;平台与用户的双重负担：这种反模式（Anti-pattern）不仅给用户的架构带来了技术债，也对云平台的调度系统造成了不必要的压力，是一种低效的资源利用方式。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;从变通到原生支持-ai-sandbox-配套能力&#34;&gt;&lt;strong&gt;从变通到原生支持 AI Sandbox 配套能力&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;AI Agent 工作负载的兴起，标志着 Serverless 计算范式的一次重要演进。需求已经从单纯的“执行一段代码”，转变为“管理一个有状态的、可交互的完整环境”。这要求平台本身必须从一个简单的事件触发器，进化为一个具备复杂会话生命周期管理能力的智能调度系统。&lt;/p&gt;
&lt;p&gt;阿里云函数计算敏锐地捕捉到了这一趋势，并推出了业界领先的原生解决方案，彻底告别了过去的变通，为有状态 Serverless 应用提供了坚实的平台级支持。&lt;/p&gt;
&lt;h3 id=&#34;核心能力安全会话亲和隔离与管理&#34;&gt;核心能力：安全、会话亲和、隔离与管理
&lt;/h3&gt;&lt;p&gt;函数计算推出的这套原生解决方案，由三大核心能力构成，它们协同工作，为 AI Sandbox 提供了完美的运行环境。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;灵活的安全机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;传统 Serverless 架构，基于函数执行角色，通常会由平台默认注入一个临时的 STS Token 实现运行时的无 AK 化，确保 AK 的安全；但考虑到 AI 执行环境的安全性和 STS Token 被 AI 滥用的潜在安全风险，平台提供了禁止注入 STS Token 的能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 强会话亲和 (Session Affinity)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是解决状态化问题的关键。会话亲和性是一个智能路由层，它确保在一次会话的整个生命周期中，所有来自同一客户端的请求，都会被精确且持续地路由到同一个函数实例上。函数计算提供了多种灵活的亲和方式，包括专为 Agent 场景设计的 &lt;strong&gt;MCP SSE 亲和&lt;/strong&gt;
，以及适用于 Web 场景的 &lt;strong&gt;HeaderField 亲和&lt;/strong&gt;
和 &lt;strong&gt;Cookie 亲和&lt;/strong&gt;
。这就为每个用户会话分配了一个固定的函数实例，保证了交互的连续性和上下文的完整性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 会话物理隔离 (Session Isolation)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果说会话亲和解决了“连续性”的问题，那么会话隔离则解决了“安全性”的问题。在多租户 SaaS 平台中，确保不同租户的沙箱环境绝对隔离是最高安全准则。启用会话隔离后，函数计算会为每一个会话独占一个完整的函数实例（强制将单实例 Session 并发度设置为 1）。这意味着租户 A 的内存、临时文件、进程空间与租户 B 的环境是物理上分离的（基于神龙裸金属）和逻辑上独立的，从而提供了金融级别的多租户安全保障。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 会话管理接口 (Session Management Interface)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数计算将这些强大的底层能力，通过简洁的控制台配置选项和 API 接口开放给开发者。开发者无需编写复杂的外部编排和调度逻辑，只需通过简单的配置，就能创建、查询和销毁这些被隔离的、有状态的会话。平台在后台自动处理了会话生命周期与实例生命周期的精确映射和管理，极大地降低了开发门槛。&lt;/p&gt;
&lt;h3 id=&#34;架构对比从混乱到优雅&#34;&gt;架构对比：从混乱到优雅
&lt;/h3&gt;&lt;p&gt;通过下面的架构对比图，我们可以清晰地看到从“变通方案”到“原生支持”的巨大飞跃。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/547d3cfea841fce261b5aa65998ddf7e.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;会话亲和与会话隔离并非两个孤立的功能，而是一个统一概念的两个侧面，共同构建了一个全新的 Serverless 原语：
“&lt;strong&gt;按需生成的、隔离的、有状态的运行时环境&lt;/strong&gt;
”
。亲和性定义了“得到什么”（一个连续的环境），隔离性定义了“如何得到”（一个安全独占的环境）。这种组合，让函数计算超越了传统 FaaS 的范畴，成为一个能够原生承载有状态应用的强大平台。&lt;/p&gt;
&lt;h3 id=&#34;存储隔离解决状态持久化难题&#34;&gt;存储隔离：解决状态持久化难题
&lt;/h3&gt;&lt;p&gt;一个完整的 AI Sandbox 解决方案，不仅需要解决计算层的状态管理，还必须应对存储层的持久化挑战。函数计算通过创新的技术和完善的最佳实践，为 Agent 的两类核心存储需求——&lt;strong&gt;本地临时存储&lt;/strong&gt;和&lt;strong&gt;持久化共享存储&lt;/strong&gt;——提供了端到端的解决方案。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地临时存储：快照技术带来的极速恢复&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;挑战：当一个用户会话进入空闲状态时，为了节约成本，平台可能会回收或“冻结”其占用的实例。那么，当用户再次发起请求时，如何快速恢复该实例本地磁盘上原有的环境状态（例如已安装的依赖包、生成的代码文件、会话日志等）？传统的冷启动方式需要重新初始化整个环境，耗时过长，严重影响用户体验。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决方案：函数计算为此引入了基于快照的会话运行时环境恢复机制。当一个启用了会话隔离且设置了最小实例数的函数实例进入空闲时，平台并不会简单地销毁它。相反，系统会自动为该实例的状态（包括其完整的本地磁盘）创建一个快照 (Snapshot)。当该会话的下一个请求到达时，平台会直接从这个快照“唤醒”一个全新的实例。这个过程是“热启动”，能够在短时间内恢复会话之前的所有本地环境。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种机制巧妙地平衡了成本与性能，为用户提供了持久化会话的体验，而其计费模式却依然遵循 Serverless 的按需使用原则，只在实例活跃时才收取全额费用。&lt;/p&gt;
&lt;h3 id=&#34;持久化共享存储会话粒度存储隔离&#34;&gt;持久化共享存储：会话粒度存储隔离
&lt;/h3&gt;&lt;h4 id=&#34;共享存储架构的多租隔离挑战&#34;&gt;共享存储架构的多租隔离挑战
&lt;/h4&gt;&lt;p&gt;对于采用 SaaS（软件即服务）模式的 Agent 平台而言，其核心架构必须支持成千上万个租户（Tenant）在隔离环境中安全地运行。在数据持久化层面，这些租户的项目文件、数据集等核心资产，通常会统一存放在一个高可用、可扩展的共享后端存储系统上（例如，NFS 协议的阿里云文件存储 NAS）。&lt;/p&gt;
&lt;p&gt;在此背景下，一个严峻的安全挑战应运而生：如何在物理共享的存储资源上，实现逻辑上租户之间数据的严格隔离，有效防止任何形式的数据越权访问。传统的做法，即将所有用户的会话相关实例挂载到同一个共享根目录，是一种完全不可接受的方案。这种设计存在重大安全隐患，无法满足企业级的安全与合规要求。&lt;/p&gt;
&lt;h4 id=&#34;从计算隔离到存储隔离的延伸&#34;&gt;从计算隔离到存储隔离的延伸
&lt;/h4&gt;&lt;p&gt;为应对这一挑战，Serverless 平台需要一套端到端的数据隔离与访问控制方案。该方案以前文所述的“会话（Session）”抽象为基础，将会话亲和（Session Affinity）与会话隔离（Session Isolation）能力从计算层延伸至存储层，构建起一道坚实的数据安全防线。&lt;/p&gt;
&lt;p&gt;我们为此引入了“会话粒度存储粘性”（Session-level Storage Stickiness）的核心机制。其设计思想是：&lt;strong&gt;将会话与一个持久化的、归属于特定租户的存储子目录进行强绑定。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;具体而言，当平台为租户创建会话时，会执行以下关键操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;动态绑定：每个会话都将唯一关联到一个用户指定的挂载子目录（Sub-Path）。此目录成为该会话期间所有持久化数据的唯一、专属存储位置。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;按需创建：如果租户指定的子目录尚不存在，平台将自动、原子化地创建该目录，确保服务启动的无缝衔接。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这种方式，我们巧妙地在共享的存储挂载点（Mount Point）之上，为每个会话构建了一个独立的、目录级别的逻辑“数据沙箱”，从基础文件系统层面杜绝会话间数据交叉的可能性。&lt;/p&gt;
&lt;h3 id=&#34;基于posix标准的多租存储安全实践框架&#34;&gt;基于POSIX标准的多租存储安全实践框架
&lt;/h3&gt;&lt;p&gt;在会话粒度存储粘性能力基础上，函数计算给用户提供了一套可落地的&lt;strong&gt;多租户存储安全最佳实践框架&lt;/strong&gt;
。开发者可以利用平台能力，构建一个层次化的纵深防御体系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UID 隔离：这是 POSIX 文件系统权限控制的基石。用户需要为每个会话（可以映射为每个租户或会话）颁发一个唯一的 POSIX 用户 ID (UID) 。这样，每个会话在文件系统层面就有了自己独立的“身份”。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SecurityContext 继承：平台侧在自动创建不存在的挂载目录时，会自动将目录的 UID 和 GID 指定为用户配置的 UID 以及 GID，并将目录的访问 Mode 设置为 700 (rwx&amp;mdash;&amp;mdash;)，保证挂载目录的权限只为其所有者，在此基础上，用户的函数主进程在挂载目录下创建子目录或者文件时，需要主动继承挂载目录的 SecurityContext ，从源头上防止了权限混乱。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主进程 UID 切换：这一步在进程层面加固了隔离。Agent 的代码本身就运行在受限的、非 root 的用户身份下，极大地缩小了潜在的攻击面。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;目录配额 (Directory Quotas)：这是防止“邻居噪音”问题的关键一环。需要借助存储平台侧的目录级配额能力，主动为不同会话（或不同租户）的目录精确设置配额，有效防止某个恶意或行为异常的租户耗尽整个共享文件系统的存储空间，从而保障了其他所有租户服务的可用性。&lt;/strong&gt;****&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;UID 复用：当一个UID被回收后，它在文件系统上的内容依然存在，在真正清理完文件系统上对应会话的内容后，该 UID 才能被再次复用，若依赖存储平台侧具备目录 TTL 能力，那么基于会话最大存活时间进行合理设置即可，否则需要用户主动启动异步垃圾回收进程来定期扫描文件系统，回收过期的会话文件内容。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这套闭环的安全体系，表明函数计算提供的不仅仅是孤立的存储功能，而是一套经过深思熟虑的、面向多租户 SaaS 场景的、企业级的安全架构。&lt;/p&gt;
&lt;p&gt;尽管基于 NAS 的多租户安全框架已经足够强大和安全，但对于某些追求极致性能的场景，例如在 Sandbox 内进行大规模代码编译、高频读写海量小文件、或运行 I/O 密集型数据分析任务时，通用文件存储的毫秒级延迟可能成为瓶颈。&lt;/p&gt;
&lt;p&gt;为了满足这些最严苛的性能需求，有必要引入更先进的存储技术。&lt;strong&gt;PolarFS&lt;/strong&gt; 是专为云原生数据库 PolarDB 设计的高性能分布式文件系统，其核心优势在于&lt;strong&gt;极致的低延迟&lt;/strong&gt;。
通过利用 RDMA、NVMe 以及用户态 I/O 栈等前沿技术，PolarFS 绕过了传统的操作系统内核，实现了接近本地 NVMe SSD 的微秒级访问延迟，这比 NAS 的毫秒级延迟有数量级的提升 。&lt;/p&gt;
&lt;p&gt;这种极致性能对于 AI Sandbox 意味着更快的环境初始化、更流畅的代码执行和数据处理体验。为了将这种能力赋予广大开发者，&lt;strong&gt;阿里云函数计算正与 PolarFS 团队紧密合作，即将推出 PolarFS 的原生挂载能力&lt;/strong&gt;
。
这项新功能将支持在&lt;strong&gt;会话粒度&lt;/strong&gt;上，为每一个独立的 Sandbox 动态挂载专属的 PolarFS 存储盘。这将为需要极致 I/O 性能的 AI Agent 应用提供一个无与伦比的运行时环境，进一步巩固函数计算在该领域的领导地位。&lt;/p&gt;
&lt;h2 id=&#34;函数计算ai-sandbox-的首选运行时&#34;&gt;&lt;strong&gt;函数计算：AI Sandbox 的首选运行时&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;经过层层深入的剖析，阿里云函数计算所走的“&lt;strong&gt;进化之路&lt;/strong&gt;”也愈发清晰。它已不再是传统意义上处理瞬时、无状态任务的 Serverless 平台，而是通过一系列深刻的技术革新，&lt;strong&gt;真正进化为了支撑 AI Sandbox 这一新兴、严苛工作负载的“新基座”&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;端到端的原生解决方案&#34;&gt;端到端的原生解决方案
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;这一进化的核心&lt;/strong&gt;，在于其方案的完整性与原生性。它不是通过零散功能的拼凑或复杂的变通来实现对 AI Sandbox 的支持，而是从底层硬件到上层应用提供了一套无缝集成的、端到端的解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;计算隔离：&lt;strong&gt;以“神龙裸金属”的&lt;/strong&gt;硬件级隔离&lt;/strong&gt;为根基，结合“MicroVM 安全容器”的&lt;strong&gt;内核级隔离&lt;/strong&gt;，为这个&lt;strong&gt;基座&lt;/strong&gt;提供了业界最高标准的安全保障。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;会话管理：&lt;/strong&gt;
通过打破 Serverless 无状态的传统束缚，以原生的“会话亲和”与“会话隔离”能力，完美解决了 Agent 所需的有状态、长连接和多租户隔离问题，&lt;strong&gt;这标志着其向有状态应用领域的一次关键进化&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储安全：&lt;/strong&gt;
创新的“快照恢复”技术实现了本地临时存储的秒级恢复，而基于“UID/GID 隔离”和“目录配额”的完整安全隔离框架，则为持久化共享存储构建了坚不可摧的多租户安全堡垒。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;正是这三大支柱，共同铸就了函数计算这一 AI Sandbox 的“新基座”&lt;/strong&gt;。
这个强大而优雅的架构，不仅代表了函数计算自身的&lt;strong&gt;成功进化&lt;/strong&gt;，更标志着 Serverless 架构迈入了一个能够原生承载复杂、有状态 AI 应用的新纪元。它让开发者能够以最低的成本、最快的速度和最高的安全性，站在这块坚实的基座上，构建和部署下一代 AI Agent 应用。&lt;/p&gt;
&lt;h2 id=&#34;更多&#34;&gt;更多
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://developer.aliyun.com/article/1680498&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://developer.aliyun.com/article/1680498&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于函数计算FC构建 Browser Tool Sandbox 详解与实操,https://developer.aliyun.com/article/1680200&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>阿里云 MCP Server 开箱即用！</title>
        <link>https://ai.programnotes.cn/p/%E9%98%BF%E9%87%8C%E4%BA%91-mcp-server-%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/</link>
        <pubDate>Wed, 23 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/%E9%98%BF%E9%87%8C%E4%BA%91-mcp-server-%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8/</guid>
        <description>&lt;img src="https://ai.programnotes.cn/img/ai/921173eb687158463316045c885cd26a.png" alt="Featured image of post 阿里云 MCP Server 开箱即用！" /&gt;&lt;p&gt;&lt;strong&gt;源自&lt;/strong&gt; | 阿里云开发者 赵帅博(川林)  2025-04-23 18:00&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/ea121adfa4f0669e87e8b52c40edbbde.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;本文介绍了如何通过alibaba-cloud-ops-mcp-server和MCP（Model Context Protocol）实现AI助手对阿里云资源的复杂任务操作。内容涵盖背景、准备步骤（如使用VS Code与Cline配置MCP Server）、示例场景（包括创建实例、监控实例、运行命令、启停实例等），以及支持的工具列表和参考文档。借助这些工具，用户可通过自然语言与AI助手交互，完成ECS实例管理、VPC查询、云监控数据获取等运维任务，实现高效“掌上运维”。&lt;/p&gt;
&lt;h2 id=&#34;背景&#34;&gt;背景
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/921173eb687158463316045c885cd26a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;随着人工智能技术的快速发展，AI助手逐渐从简单的对话服务向复杂任务执行方向演进。为了使AI助手具备更强的操作能力，MCP（Model Context Protocol）[1] 应运而生。MCP通过将大模型与工具调用能力结合，让AI助手能够规划并完成复杂的现实任务。&lt;/p&gt;
&lt;p&gt;alibaba-cloud-ops-mcp-server[2]是一款专门为阿里云资源管理设计的MCP Server，它通过集成阿里云Open API和系统运维管理（OOS）[3]的能力，为AI助手提供了一系列强大的工具支持。这些工具涵盖了阿里云资源的生命周期管理（如创建、启动、停止、重启等），包括云监控数据获取以及运行命令、更换系统镜像等功能，目前已覆盖ECS实例、RDS实例以及OSS Bucket等资源。借助alibaba-cloud-ops-mcp-server，用户可以通过自然语言与AI助手交互，快速完成复杂的运维任务。&lt;/p&gt;
&lt;p&gt;在alibaba-cloud-ops-mcp-server提供的工具中，一部分功能是通过阿里云 Open API 实现的，而像运行命令、启停实例等复杂操作，则依托于系统运维管理（OOS）[3]。OOS 不仅能够为云产品提供强大的运维操作能力，还支持复杂的任务编排，尤其在处理异步场景时表现出色。例如，在启动或停止实例的过程中，OOS 会实时检查实例状态，确保 AI 助手调用完成后，ECS 实例的状态与预期一致（如 Running 或 Stopped）。此外，OOS 还内置了多种高频运维场景的公共模板，这些模板并非简单的单步 API 调用，而是经过优化的复杂操作流程，能够显著减少多轮交互的需求，提高任务执行的准确率，同时节省模型的 token 消耗，让整个过程更加高效和可靠。&lt;/p&gt;
&lt;h2 id=&#34;准备步骤&#34;&gt;准备步骤
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;使用 VS Code [4]+ Cline [5]配置MCP Server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cline是一款强大的Vscode插件，开源且完全免费，支持打开文件/文件夹、运行任务、调试代码、管理窗口等操作，能够借助大模型的能力调用工具，规划并完成真实的复杂任务&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;配置流程&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;安装 UV[6]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在VS Code 插件市场下载并打开Cline插件，在设置中配置大模型 API KEY&lt;br&gt;
 &lt;br&gt;
&lt;img src=&#34;https://ai.programnotes.cn/img/ai/8edb6073f4fbcd393026df56dc4ac497.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这里以配置阿里云百炼API Key为例：&lt;/p&gt;
&lt;p&gt;a. API Provider：选择Open AI Compatible&lt;/p&gt;
&lt;p&gt;b. Base URL：https://dashscope.aliyuncs.com/compatible-mode/v1（阿里云百炼兼容接口）&lt;/p&gt;
&lt;p&gt;c. API Key：前往 API-KEY[7] 页面获取&lt;/p&gt;
&lt;p&gt;d. Model ID：模型ID总览[8]&lt;/p&gt;
&lt;p&gt;1）推荐使用上下文较长的模型，如：qwen-max-latest等支持128k上下文的模型，否则可能会因为上下文长度限制导致AI助手无法交互&lt;/p&gt;
&lt;p&gt;           &lt;br&gt;
&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1cac90ad2094f06c9b6a387440a56ed8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;配置MCP Servers&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a. 选择右上方的工具栏中的MCP Servers&lt;br&gt;
 &lt;br&gt;
&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e058a9ca595db57fb31fb70151c09d27.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;b. 进入MCP Server界面，点击&lt;strong&gt;Configure&lt;/strong&gt;&lt;br&gt;
配置JSON文件，关闭json文件即可保存并完成配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/7b81c4d30aa11509fd29e37a5da48697.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;mcpServers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;alibaba-cloud-ops-mcp-server&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;uvx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;alibaba-cloud-ops-mcp-server@latest&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;env&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ALIBABA_CLOUD_ACCESS_KEY_ID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Access Key ID&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;ALIBABA_CLOUD_ACCESS_KEY_SECRET&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Access Key SECRET&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;c. 配置完毕后，在Installed&lt;br&gt;
界面能够检查对应MCP Server的状态，提供的Tools数量以及详细信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e3e81f0851af883a4674e207e2171eca.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;右下角配置AI助手的对话模式，为了AI助手能够实际调用工具，推荐您使用Act模式。配置完毕后您就可以在对话框开启您的对话。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/893404a2f4e439d1cc9542c12f06ca65.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;示例场景&lt;/p&gt;
&lt;p&gt;alibaba-cloud-ops-mcp-server能够为您的AI助手提供工具，操作阿里云资源并完成日常运维操作等多种需求，以针对ECS和RDS实例的生命周期进行管理和监控为例，我们将为您展示AI助手会如何使用alibaba-cloud-ops-mcp-server&lt;br&gt;
的工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建ECS实例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;向AI助手发起提问后，AI助手会自动开始规划需要使用的工具并向您请求使用许可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/ae6b7b95c2170d4aea0d94895d02c710.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;经过不断的交互，AI助手会逐渐取得所有创建ECS实例所必需的参数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/2bcabcf7daac6a720f99eed945bc7407.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/8ca98e440f4497f3fbc92f5fdafd29ab.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在收集到所需信息后，AI助手会发起创建ECS实例的请求。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/4356f70d5b1550c89c8336a88bd3f31c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;最终AI助手成功创建了名为&lt;strong&gt;alibabacloud-mcp&lt;/strong&gt;&lt;br&gt;
的ECS实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e59184b1a2f5f655db616d73a862d203.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在ECS控制台验证，AI助手成功创建了ECS实例。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e092f9983367c7d6f2e6ff4ccf05776a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;监控ECS实例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当创建了ECS实例之后，我们往往希望对实例进行监控，传统的运维方式往往需要登录到ECS控制台或者云监控控制台进行查看。现在，我们可以借助alibaba-cloud-ops-mcp-server&lt;br&gt;
轻松实现掌上运维，只需和AI助手进行自然语言交互即可轻松获取ECS实例的实时状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/d5a1c420c7f35dc9791f2b6960a9c074.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在获取对应数据后，AI助手将会进行分析并为您展示ECS实例的详细监控数据。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/c52fe54e6534be583e244e1141db9fac.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在ECS实例上运行命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在实际的开发过程中，为实现运行命令，首先我们需要编写命令脚本，并通过远程登录或者ECS控制台登陆到ECS实例上，再运行对应的命令脚本。现在，借助alibaba-cloud-ops-mcp-server&lt;br&gt;
，您只需通过自然语言，即可轻松实现运行命令的复杂操作。AI助手将会分析您的指令，得出合适的命令脚本，并借助工具帮助您在ECS实例上执行指定的命令，等待命令运行结束后向您报告命令的运行结果，从而实现 分析指令-运行命令-报告结果 整条链路的打通。以在ECS实例上部署NGINX为例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/89c21672f4677a6de4c6875d081c0849.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/f16fbad0c67fc6cdbcf8557d96df5d00.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;启停RDS实例&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在日常使用过程中，RDS实例的启动和停止是较为高频的操作类型，现在，有了alibaba-cloud-ops-mcp-server&lt;br&gt;
的支持，只要您发出指令，您的AI助手可以自动为您启动或者停止对应的RDS实例，并且等待RDS实例的状态变为期望的状态（Running或Stopped）之后, 才会向您汇报任务完成。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关闭实例&lt;br&gt;
&lt;img src=&#34;https://ai.programnotes.cn/img/ai/47c1c2454ac806ef6f56303824169083.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/074e012d153e5dce282bb453cad69e8c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动实例&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;     &lt;br&gt;
 &lt;br&gt;
&lt;img src=&#34;https://ai.programnotes.cn/img/ai/eb2162c19e734f76c53b79f76356b6fb.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;     &lt;br&gt;
 &lt;br&gt;
&lt;img src=&#34;https://ai.programnotes.cn/img/ai/a1b15749a6e12577d38f671a66b62548.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语
&lt;/h2&gt;&lt;p&gt;alibaba-cloud-ops-mcp-server&lt;br&gt;
 &lt;br&gt;
通过与 MCP 的深度集成，为 AI 助手赋予了强大的工具调用能力和复杂任务执行能力，显著提升了其在运维场景中的实用性和效率。无论是 阿里云资源的创建、监控、启停管理，还是在实例上运行自定义命令、更换系统镜像等操作，用户都可以通过自然语言交互轻松完成，真正实现了“掌上运维”的便捷体验。更多功能和支持的工具细节，请参阅本文附录。&lt;/p&gt;
&lt;p&gt;我们诚邀您体验&lt;br&gt;
 &lt;br&gt;
alibaba-cloud-ops-mcp-server，亲身感受 AI 与云计算深度融合带来的高效与便利，开启智能运维的新篇章！如果您对 OOS 的能力感兴趣，也可以访问帮助文档[8]或登录OOS 控制台[3]，探索更多关于 OOS 的强大功能和应用场景。&lt;/p&gt;
&lt;h1 id=&#34;附&#34;&gt;附
&lt;/h1&gt;&lt;h2 id=&#34;alibaba-cloud-ops-mcp-server支持工具列表&#34;&gt;alibaba-cloud-ops-mcp-server支持工具列表
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/37e8a43ed4f9d73c36ab528c99dd340a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考文档&#34;&gt;参考文档：
&lt;/h2&gt;&lt;p&gt;[1]MCP: &lt;a class=&#34;link&#34; href=&#34;https://modelcontextprotocol.io/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://modelcontextprotocol.io/introduction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2]alibaba-cloud-ops-mcp-server: &lt;a class=&#34;link&#34; href=&#34;https://github.com/aliyun/alibaba-cloud-ops-mcp-server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/aliyun/alibaba-cloud-ops-mcp-server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3]阿里云系统运维管理(OOS): &lt;a class=&#34;link&#34; href=&#34;https://oos.console.aliyun.com/overview?utm_content=g_1000403402&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://oos.console.aliyun.com/overview?utm_content=g_1000403402&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4]Visual Studio Code: &lt;a class=&#34;link&#34; href=&#34;https://code.visualstudio.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://code.visualstudio.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5]Cline: &lt;a class=&#34;link&#34; href=&#34;https://cline.bot/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cline.bot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6]UV: &lt;a class=&#34;link&#34; href=&#34;https://github.com/astral-sh/uv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/astral-sh/uv&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7]百炼: &lt;a class=&#34;link&#34; href=&#34;https://bailian.console.aliyun.com/?utm_content=g_1000403403&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bailian.console.aliyun.com/?utm_content=g_1000403403&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[8]OOS帮助文档: &lt;a class=&#34;link&#34; href=&#34;https://help.aliyun.com/zh/oos/product-overview/introduction-to-oos?utm_content=g_1000403404&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://help.aliyun.com/zh/oos/product-overview/introduction-to-oos?utm_content=g_1000403404&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>FunctionAI MCP 开发平台：助力AI应用连接数字生态</title>
        <link>https://ai.programnotes.cn/p/functionai-mcp-%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E5%8A%A9%E5%8A%9Bai%E5%BA%94%E7%94%A8%E8%BF%9E%E6%8E%A5%E6%95%B0%E5%AD%97%E7%94%9F%E6%80%81/</link>
        <pubDate>Mon, 14 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/functionai-mcp-%E5%BC%80%E5%8F%91%E5%B9%B3%E5%8F%B0%E5%8A%A9%E5%8A%9Bai%E5%BA%94%E7%94%A8%E8%BF%9E%E6%8E%A5%E6%95%B0%E5%AD%97%E7%94%9F%E6%80%81/</guid>
        <description>&lt;p&gt;&lt;strong&gt;源自&lt;/strong&gt; | 封崇  阿里云云原生   2025-04-14 18:02&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/087ee75c2a26ff67233996986126ecfa.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;MCP：AI 时代的“操作系统接口”,Cloud Native:&lt;/p&gt;
&lt;p&gt;2024 年 11 月，Anthropic 发布模型上下文协议（MCP），这一开放标准迅速引发开发者社区的&amp;quot;协议觉醒&amp;quot;。其本质是通过标准化接口实现 LLM 与外部世界的双向交互，正如 USB 协议统一外设接入，MCP 正成为 AI 应用连接数字生态的通用总线。随着 Cursor、Claude &lt;br&gt;
Desktop &lt;br&gt;
等开发工具相继集成，特别是 OpenAI 宣布全面兼容 MCP 协议，标志着 MCP 从技术实验迈入产业级标准，这一标准化接口正重塑 AI 与数字世界的交互范式。&lt;/p&gt;
&lt;p&gt;截至 2025 年 4 月，MCP.so【1】上已经已有超过 8000 个注册的 MCP Server，涵盖数据处理、文件系统、API 网关、聊天机器人、数据库等服务类别，这一数量还在迅速增长。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生态暴发期的痛点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;尽管 MCP 生态呈现指数级增长，GitHub 仓库星标数半年突破 3.5 万，但生产级落地仍面临三重挑战：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 本地化瓶颈&lt;/strong&gt;&lt;br&gt;
：当前绝大多数 MCP server 都采用传统 STDIO 模式，该模式没有鉴权能力（缺乏 OAuth 2.1 标准的双向认证机制、无法实现基于角色的访问控制），在复杂业务场景下暴露出调试困难、网络隔离性差等缺陷，难以实现访问内网环境的数据安全管控，内网穿透导致攻击面扩大；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 弹性困境&lt;/strong&gt;&lt;br&gt;
：MCP 工具调用流量呈现显著的非稳态特征以及&amp;quot;脉冲式&amp;quot;波动，比如智能客服系统的峰谷效应非常明显，传统虚拟机部署造成大量资源浪费；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 开发断层&lt;/strong&gt;&lt;br&gt;
：从本地调试到云端部署需要重构鉴权、变量管理、日志、中间件等基础组件，改造成本高，开发者大量的精力消耗在非业务代码的开发上；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Serverless 是 MCP 托管的最佳解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们观察到大部分的 MCP server 有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;稀疏调用，而且对算力的需求都比较小，0.5c/1G 的规格基本能够应对大部分场景；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码体积比较小（&amp;lt;100MB），Node.js、Python 解释型语言是 MCP 的一等公民，大部分 MCP server 直接通过 npx、uv 就能一键运行；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MCP server 的迭代非常快，新增、修改或弃用 MCP server 的场景会非常高频，对 MCP server 元数据管理的需求非常普遍；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;因此灵活部署、弹性扩展的运行时对于 MCP server 的托管非常契合，这恰恰是 Serverless 的最大优势。&lt;/strong&gt;&lt;br&gt;
以阿里云函数计算为例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;天然的事件驱动模型，提供毫秒级弹性能力、按量付费、安全沙箱的运行时环境，完美解决了云上托管对于性能、成本、安全的需求；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;官方对于 Node.js、Python 运行时的支持完善，内置代码包加速能力以及层的扩展，大幅降低代码启动时间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制台、SDK、ServerlessDevs 工具提供丰富的函数元数据的管理能力；&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些能力让 Serverless 正成为托管 MCP 的最优解。作为 MCP &lt;br&gt;
的最佳运行时，函数计算已经支持阿里云百炼 MCP 服务【2】。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s?__biz=MzUzNzYxNjAzMg==&amp;amp;mid=2247573406&amp;amp;idx=1&amp;amp;sn=a9e215ecbf675b6058bf5f726063a316&amp;amp;scene=21#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Function AI 是基于函数计算构建的 Serverless AI 应用开发平台，基于函数计算的运行时能力上线了完整的 MCP 开发能力，成为真正意义上的 MCP 开发平台。您可以进入FunctionAI 控制台【3】，快速体验 MCP 服务的能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式一：通过模板一键部署&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1选择-mcp-模板&#34;&gt;1. 选择 MCP 模板
&lt;/h3&gt;&lt;p&gt;进入FunctionAI 控制台【4】，选择探索-&amp;gt;筛选应用模板（MCP Server），选择一个 MCP 模板进行部署&lt;br&gt;
&lt;img src=&#34;https://ai.programnotes.cn/img/ai/8eaac6393e6591a3066bc7b143fd0a95.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-填写模板配置部署项目&#34;&gt;2. 填写模板配置，部署项目
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/a7fa62b44c44e08f70f71b3fc4504de4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-查看部署进度&#34;&gt;3. 查看部署进度
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/cc0d4f2dd8f2833d543882bc611b63de.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式二：创建自定义 MCP 服务&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1创建空白项目&#34;&gt;1. 创建空白项目
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/bb40530090e7acd185b2eb51ae8639e9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;2创建-mcp-服务&#34;&gt;2. 创建 MCP 服务
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/62ee312927e0fcb139bb81cf658c8270.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;3编辑-mcp-服务配置完成后点击预览部署&#34;&gt;3. 编辑 MCP 服务配置，完成后点击预览&amp;amp;部署
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1cc1b3db23afe5b9bdf7e12e76a8528c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;4查看部署进度等待部署完成&#34;&gt;4. 查看部署进度，等待部署完成
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0edb2bfd8a9cd1e90b3f95833401ee14.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式三：使用 ServerlessDevs 工具本地部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FunctionAI 正式发布了 ServerlessDevs【5】工具的 MCP 组件，实现本地部署 MCP 工程到 FunctionAI 的能力&lt;/p&gt;
&lt;h3 id=&#34;1安装-serverlessdevs-工具&#34;&gt;1. 安装 ServerlessDevs 工具：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install @serverless-devs/s -g
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;2初始化-mcp-项目&#34;&gt;2. 初始化 MCP 项目
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s init start-fcai-mcp-nodejs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;3查看-syaml&#34;&gt;3. 查看 s.yaml
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;edition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nodejs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;access&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cn-hangzhou&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;resources&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;nodejs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fcai&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vars&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mcp&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;deployed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;devs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;transport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdio&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# stidio | sse&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;runtime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nodejs20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;cpu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;memorySize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;rootDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;./&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;oss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;auto&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#默认构建器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;c1&#34;&gt;# 构建环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;n&#34;&gt;languages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nodejs20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;c1&#34;&gt;# 执行步骤&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;n&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;startCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;node ./dist/index.js&amp;#34;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 启动命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;instanceQuota&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 实例数配额&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;4执行部署&#34;&gt;4. 执行部署
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;s deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;&#34;&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/65cbedb605963231d21a24f01a6411a0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;登录到控制台，可以查看云端的部署详情&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/9008afa9b766f18ec8870be548f7eca5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;FunctionAI 支持托管 STDIO/SSE 协议的 MCP server。如果 MCP server 代码采用 STDIO，FunctionAI 会启动一个 SSE 服务来代理 STDIO 的请求，客户端访问需要使用 SSE 方式。&lt;/p&gt;
&lt;p&gt;当 MCP 服务部署完成后，平台会生成一个 SSE 的连接地址，并且会生成 MCP server 的 schema 用于测试。&lt;/p&gt;
&lt;p&gt;用户可以直接在控制台上测试连接、测试工具，也可以使用官方的 Inspector 在本地进行测试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式 1：FunctionAI 控制台测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1b500d2ecbe51c3bd818ab0a2d241d31.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;查看日志和监控&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/64428131f50c544e1eb810049aa74148.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/625f7be471aa00cb5795a70448e9bdb4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方式 2：Inspector 本地测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;复制 FunctionAI 生成的公网访问地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/827d8ce0c33c9ca0e0377d7e76adedd4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;本地启动 inspector，输入访问地址进行调试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npx @modelcontextprotocol/inspector
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/2fb2f7c95d741f82ad78f0ce8c95fdf5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;高阶能力&lt;/p&gt;
&lt;p&gt;Cloud Native&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;鉴权&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MCP 的鉴权只适用于 SSE 的协议，而且必须遵循 OAuth2.1 协议标准，对于大量的 STDIO 的 MCP 服务托管的改造难度非常之高，企业落地 MCP 鉴权是一个非常痛点的问题。&lt;/p&gt;
&lt;p&gt;FunctionAI 提供了网关侧的 Bearer 鉴权能力，用户只需要开启鉴权功能，使用平台生成的 Bearer Token，就可以让 MCP 服务自带鉴权能力。&lt;/p&gt;
&lt;h3 id=&#34;使用方式&#34;&gt;使用方式
&lt;/h3&gt;&lt;h3 id=&#34;&#34;&gt;
&lt;/h3&gt;&lt;p&gt;编辑服务配置，点击开启鉴权，保存并且部署。开启后，平台会对服务生成一个只读的 Bearer Token。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/176da26d1e64590fb48d8e7e9324fcc8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/9023eafd8409b7fe75ef35e317d59183.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;
&lt;/h3&gt;&lt;h3 id=&#34;测试鉴权生效&#34;&gt;测试鉴权生效
&lt;/h3&gt;&lt;p&gt;使用平台生成的 Bearer Token，可以正常访问 MCP 服务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/7d5c7f3aa4dc7d4fdeab04d14dbf5154.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;使用错误的 token 时，访问失败&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/f7d5043ba19bec75038798cf94fc5e8a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;使用本地的 Inspector，输入服务的 token，访问正常。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/6807b4d0e56bbfc668a8d870fba77f27.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;变量管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多的 MCP Server 代码都需要访问第三方服务，比如高德地图、Github 等，需要持有用户的访问秘钥，比如 API-Key、AccessToken，这些秘钥通常以环境变量加载或者启动命令参数注入。&lt;/p&gt;
&lt;p&gt;FunctionAI 提供了变量管理能力，并且支持敏感变量托管，可以实现 MCP 服务访问秘钥的安全可靠管理。&lt;/p&gt;
&lt;h3 id=&#34;配置方式设置服务变量&#34;&gt;配置方式：设置服务变量
&lt;/h3&gt;&lt;h3 id=&#34;&#34;&gt;
&lt;/h3&gt;&lt;p&gt;选择服务-&amp;gt;服务变量，添加服务变量的 Key 和 Value&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/15b09c554b6a7fbbc9bdd1ba2f2e310e.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;
&lt;/h3&gt;&lt;h3 id=&#34;加载方式-1环境变量&#34;&gt;加载方式 1：环境变量
&lt;/h3&gt;&lt;h3 id=&#34;&#34;&gt;
&lt;/h3&gt;&lt;p&gt;FunctionAI 上配置的服务变量会默认注入到函数启动的环境变量中，MCP 服务代码可以直接通过系统环境变量读取&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/43ad2532377ad53c8c93e3cf34ccd342.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;&#34;&gt;
&lt;/h3&gt;&lt;h3 id=&#34;加载方式-2启动参数&#34;&gt;加载方式 2：启动参数
&lt;/h3&gt;&lt;h3 id=&#34;&#34;&gt;
&lt;/h3&gt;&lt;p&gt;FunctionAI 的服务变量支持通过 ${self.KEY_NAME} 的方式引用，可以在启动命令中修改命令行参数，使用变量的引用，在启动阶段注入变量的值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/11f9f30a1e47a380071e5affa1db4312.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/f074718d0e6abbc83b8cf03b356d8c67.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;绑定代码仓库进行持续部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FunctionAI 的 MCP 服务面向开发态能力，提供以代码仓库托管 MCP 服务的能力。&lt;/p&gt;
&lt;p&gt;使用方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编辑 MCP 服务配置，选择代码仓库，目前支持了 Github、Gitee、Codeup、GitLab、OSS 代码仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择仓库分支、MCP 工程在代码仓库中的根目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择构建环境：对于多语言的工程，可以选择多个构建环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编辑构建命令：例如 npm build、pip install -r requirements.txt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可选：开启构建缓存，缓存目录根据不同语言可以设置~/.npm（Node.js）、&lt;del&gt;/.cache（Python）、&lt;/del&gt;/.m2、（Java）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e22ee2e9b7cbfb185a2ba94c6cd73174.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;绑定 Git 仓库后，如果指定的分支有 push 操作，会自动触发服务的持续部署&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0a0391910a8ba2fd0f98201c8ea7c8de.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;极速模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于延迟敏感性的业务，FunctionAI 提供了极速模式，可以提前预留指定数量的实例快照，降低频繁冷启动带来的开销，并且只有在有活跃请求时才会产生 vCPU 费用，可以实现性能和成本的平衡。&lt;/p&gt;
&lt;p&gt;另外由于 MCP SSE 请求的 session 机制，同一个 session id 访问到不同实例会导致上下文丢失，因此建议开启预置快照为 1 并且实例限额为 1，这样可以让 SSE 请求打到不同弹性实例的概率更小。&lt;/p&gt;
&lt;p&gt;FunctionAI 后面会上线会话亲和性能力，尽情期待。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/66ea83970635dde4a3af53a4472379ab.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;开启后，可以在函数监控页面看到预留实例的个数&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/d5dacedc72983e325007e050a13c84c5.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;FunctionAI 现在已经支持了完整的 MCP 开发能力，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;部署形式上，支持模板直接部署、自定义 MCP 服务、ServerlessDevs 工具本地部署&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;托管能力上，支持 STDIO/SSE 的自动托管，无需业务改造既能生成可用于访问的 SSE 地址&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调试能力上，支持控制台直接调试以及 Inspector 本地调试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次开发能力上，支持变量管理、鉴权、绑定代码仓库进行持续部署&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可观测能力上，支持函数监控、实例监控以及日志&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弹性调度上，支持标准模式以及极速模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MCP 的价值是统一了 Agent 和 LLM 之间的标准化接口，有了 MCP Server 的托管以及开发态能力只是第一步，接下来重要的是做好 MCP 和 Agent 的集成，FunctionAI 即将上线 Agent 开发能力，敬请期待。&lt;/p&gt;
&lt;p&gt;【1】MCP.so &lt;a class=&#34;link&#34; href=&#34;https://mcp.so/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mcp.so/&lt;/a&gt;&lt;br&gt;
【2】Serverless MCP 运行时业界首发，函数计算让 AI 应用最后一公里提速&lt;br&gt;
【3】FunctionAI 控制台 &lt;a class=&#34;link&#34; href=&#34;https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcap.console.aliyun.com%2Fexplore&amp;amp;clearRedirectCookie=1&amp;amp;lang=zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcap.console.aliyun.com%2Fexplore&amp;clearRedirectCookie=1&amp;lang=zh&lt;/a&gt;&lt;br&gt;
【4】FunctionAI 控制台 &lt;a class=&#34;link&#34; href=&#34;https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcap.console.aliyun.com%2Fexplore&amp;amp;clearRedirectCookie=1&amp;amp;lang=zh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcap.console.aliyun.com%2Fexplore&amp;clearRedirectCookie=1&amp;lang=zh&lt;/a&gt;&lt;br&gt;
【5】ServerlessDevs  &lt;a class=&#34;link&#34; href=&#34;https://www.serverless-devs.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.serverless-devs.com/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>把MCP和AI代理部署在无服务器架构上，大幅提升业务性能</title>
        <link>https://ai.programnotes.cn/p/%E6%8A%8Amcp%E5%92%8Cai%E4%BB%A3%E7%90%86%E9%83%A8%E7%BD%B2%E5%9C%A8%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E4%B8%8A%E5%A4%A7%E5%B9%85%E6%8F%90%E5%8D%87%E4%B8%9A%E5%8A%A1%E6%80%A7%E8%83%BD/</link>
        <pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/%E6%8A%8Amcp%E5%92%8Cai%E4%BB%A3%E7%90%86%E9%83%A8%E7%BD%B2%E5%9C%A8%E6%97%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9E%B6%E6%9E%84%E4%B8%8A%E5%A4%A7%E5%B9%85%E6%8F%90%E5%8D%87%E4%B8%9A%E5%8A%A1%E6%80%A7%E8%83%BD/</guid>
        <description>&lt;img src="https://ai.programnotes.cn/img/ai/eece5d1ae0f8710e55457ee03acb53de.png" alt="Featured image of post 把MCP和AI代理部署在无服务器架构上，大幅提升业务性能" /&gt;&lt;p&gt;&lt;strong&gt;源自&lt;/strong&gt; | maxlong  腾讯云原生&lt;/p&gt;
&lt;p&gt;MCP协议通过标准化接口实现AI模型与外部工具的无缝连接，而Serverless架构提供弹性计算资源，两者结合可解决AI代理的动态资源需求。例如，企业内大量AI智能体（如千人规模）的实时调度，可通过Serverless函数动态部署MCP服务器，按需扩展计算能力。这种模式尤其适用于低频但需快速响应的场景（如临时视频处理、数据查询），避免传统软件采购的高昂成本。同时在 Serverless 环境中，每个函数执行都有独立的执行环境，这种隔离性确保了不同 AI 代理之间的安全性。通过精细的权限控制和资源访问管理，可以有效防止数据泄露和未经授权的访问，增强系统的安全性。&lt;/p&gt;
&lt;h3 id=&#34;1-mcp&#34;&gt;1. MCP
&lt;/h3&gt;&lt;h4 id=&#34;11简介&#34;&gt;1.1. 简介
&lt;/h4&gt;&lt;p&gt;模型上下文协议（Model Context Protocol，简称 MCP）是由 Anthropic 推动的一项开放标准，它标准化了应用程序向 LLM 提供上下文的方式。可以将 MCP 视为 AI 应用程序的 USB-C 端口。正如 USB-C 提供了一种将设备连接到各种外围设备和配件的标准化方式一样，MCP 提供了一种将 AI 模型连接到不同数据源和工具的标准化方式。&lt;/p&gt;
&lt;p&gt;近期，OpenAI 对其 Agent SDK 进行了重大更新，正式支持 MCP 协议。这一举措使开发者能够在统一的接口标准下，快速集成多种工具，极大地扩展了 AI 模型的能力。这一变化标志着 MCP 协议在业界的广泛认可和应用，进一步推动了人工智能技术的发展。&lt;/p&gt;
&lt;h4 id=&#34;12为什么用mcp&#34;&gt;1.2. 为什么用MCP
&lt;/h4&gt;&lt;p&gt;MCP可以帮助我们在LLM之上构建Agent或者复杂的工作流，对于一些经常需要与数据和工具集成的场景，MCP协议提供以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于协议实现的集成数据集或工具可以以插件方式快速连接到LLM。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解耦工具和LLM，使得应用可以在多个LLM提供商切换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据和工具不需要上传远端，保护数据隐私。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;13总体架构&#34;&gt;1.3. 总体架构
&lt;/h4&gt;&lt;p&gt;MCP 的核心是客户端-服务器架构，其中主机应用程序可以连接到多个服务器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/eece5d1ae0f8710e55457ee03acb53de.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;● MCP 主机：希望通过 MCP 访问数据的程序，例如 Claude Desktop、IDE 或 AI 工具&lt;/p&gt;
&lt;p&gt;● MCP 客户端：与服务器保持 1:1 连接的协议客户端&lt;/p&gt;
&lt;p&gt;● MCP 服务器：轻量级程序，每个程序都通过标准化模型上下文协议公开特定功能&lt;/p&gt;
&lt;p&gt;● 本地数据源：MCP 服务器可以安全访问的您的计算机文件、数据库和服务&lt;/p&gt;
&lt;p&gt;● 远程服务：MCP 服务器可通过互联网（例如通过 API）连接到的外部系统&lt;/p&gt;
&lt;h3 id=&#34;2mcpserveronserverless&#34;&gt;2. MCPServerOnServerless
&lt;/h3&gt;&lt;h4 id=&#34;21效果展示&#34;&gt;2.1. 效果展示
&lt;/h4&gt;&lt;p&gt;先看看效果，模仿mcp 官方server例子开发一个天气查询的mcp server，同时部署到腾讯云云函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/c5e2e4e2d1cd92eaad5b2ebf0473722a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;22-天气查询mcp-server代码&#34;&gt;2.2. 天气查询MCP Server代码
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mcp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fastmcp&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FastMCPimport&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;osimport&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loggingimport&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;httpximport&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Initialize FastMCP servermcp = FastMCP(&amp;#34;weather&amp;#34;, host=&amp;#34;0.0.0.0&amp;#34;, port=9000)# Constants# 天气API地址 设置对应天气api接口地址 如腾讯天气api接口地址https://apis.map.qq.com/ws/weather/v1/NWS_API_BASE = &amp;#34;api url&amp;#34;USER_AGENT = &amp;#34;weather-app/1.0&amp;#34;API_KEY = &amp;#34;api key&amp;#34;#以下为腾讯天气api接口伪代码，需要自行完善@mcp.tool()def get_weather(city: str) -&amp;gt; str:    &amp;#34;&amp;#34;&amp;#34;    获取某个城市的天气    Args:    city: 城市    &amp;#34;&amp;#34;&amp;#34;        try:        # 使用 HTTPS 协议并验证 SSL        client = httpx.Client(verify=True)                # 构建请求参数        params = {            &amp;#34;key&amp;#34;: API_KEY,            &amp;#34;city&amp;#34;: city,            &amp;#34;output&amp;#34;: &amp;#34;json&amp;#34;        }                # 使用新的天气API地址        response = client.get(            &amp;#34;https://apis.map.qq.com/ws/weather/v1/&amp;#34;,            params=params,            timeout=10        )                # 打印响应状态和内容以便调试        logging.info(f&amp;#34;Status Code: {response.status_code}&amp;#34;)        logging.info(f&amp;#34;Response: {response.text}&amp;#34;)                weather_data = response.json()                if weather_data.get(&amp;#34;status&amp;#34;) != 0:            returnf&amp;#34;获取天气信息失败: {weather_data.get(&amp;#39;message&amp;#39;, &amp;#39;未知错误&amp;#39;)}&amp;#34;                    # 获取实时天气数据        data = weather_data.get(&amp;#34;result&amp;#34;, {})        observe = data.get(&amp;#34;realtime&amp;#34;, {})        infos = data.get(&amp;#34;infos&amp;#34;, {})                ifnot observe:            return&amp;#34;无法获取天气信息: 数据为空&amp;#34;                    # 返回格式化的天气信息        weather_info = f&amp;#34;&amp;#34;&amp;#34;            天气: {infos.get(&amp;#39;weather&amp;#39;, &amp;#39;&amp;#39;)}            温度: {infos.get(&amp;#39;temperature&amp;#39;, &amp;#39;&amp;#39;)}°C            湿度: {infos.get(&amp;#39;humidity&amp;#39;, &amp;#39;&amp;#39;)}%            风力: {infos.get(&amp;#39;wind_power&amp;#39;, &amp;#39;&amp;#39;)}级        &amp;#34;&amp;#34;&amp;#34;        return weather_info            except httpx.HTTPError as e:        error_msg = f&amp;#34;HTTP请求失败: {str(e)}&amp;#34;        logging.error(error_msg)        return error_msg    except Exception as e:        error_msg = f&amp;#34;获取天气信息失败: {str(e)}&amp;#34;        logging.error(error_msg)        return error_msg    finally:        if&amp;#39;client&amp;#39;in locals():            client.close()if __name__ == &amp;#39;__main__&amp;#39;:    logging.basicConfig(level=logging.INFO)    mcp.run(transport=&amp;#39;sse&amp;#39;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;特别注意的地方是函数镜像或者web代码都需要设置9000的监听端口，所以代码要设置server 端口为9000&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mcp = FastMCP(&amp;#34;weather&amp;#34;, host=&amp;#34;0.0.0.0&amp;#34;, port=9000)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;23相关依赖&#34;&gt;2.3. 相关依赖
&lt;/h4&gt;&lt;p&gt;requirements.txt&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;httpxmcp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;24部署到云函数&#34;&gt;2.4. 部署到云函数
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Remote MCP Server VS Local MCP Server&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/23d0067d60a3138eaf17af6dd92d2233.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;241通过镜像部署云函数&#34;&gt;2.4.1. 通过镜像部署云函数
&lt;/h5&gt;&lt;p&gt;Dockerfile内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 使用官方的 Python 3.13 镜像作为基础镜像FROM python:3.13.2-slim# 设置工作目录WORKDIR /app# 复制当前目录下的所有文件到工作目录COPY . /app# 安装依赖RUN pip install --no-cache-dir .# 暴露端口EXPOSE 9000# 运行应用CMD [&amp;#34;python&amp;#34;, &amp;#34;weather.py&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;``&lt;/p&gt;
&lt;p&gt;构建好Docker镜像，将Docker进行push到tcr镜像仓库&lt;/p&gt;
&lt;p&gt;tcr镜像仓库详见：&lt;br&gt;
 https://cloud.tencent.com/document/product/1141&lt;/p&gt;
&lt;p&gt;web镜像函数：&lt;br&gt;
 https://cloud.tencent.com/document/product/583/56051&lt;/p&gt;
&lt;p&gt;上传好镜像之后，可以开始创建云函数，选择使用&lt;strong&gt;容器镜像&lt;/strong&gt;&lt;br&gt;
，函数类型&lt;strong&gt;选择Web函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/b2b3b40923f2906a68469544c512a4a8.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;选择&lt;strong&gt;函数镜像&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/d04975d6f7667fc1c1a3108e06119bee.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在高级配置中需要&lt;strong&gt;设置超时时间&lt;/strong&gt;&lt;br&gt;
为较长时间，比如120s，因为sse服务需要进行长连接，如果时间太短，连接会被快速断开。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1a980411da4722c593cf20c8ceff4723.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;同时需要设置函数支持&lt;strong&gt;请求多并发。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/ad40b3314af401f11c9517856e15845a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【保存】&lt;/strong&gt;&lt;br&gt;
之后就完成了mcp server函数的创建&lt;/p&gt;
&lt;p&gt;最后一步&lt;strong&gt;创建函数的URL&lt;/strong&gt;&lt;br&gt;
，使用该URL提供给mcp client进行sse方式的访问：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/31a5b8736fcca6e112afea7baa82867b.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;同时使用&lt;strong&gt;镜像加速，&lt;/strong&gt;&lt;br&gt;
云函数拉取镜像会比较快：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/125b8cd25723570ec8f331f8f0c57caf.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;最后在cursor mcp中设置好函数的url即可进行mcp tools的使用了&lt;/p&gt;
&lt;h5 id=&#34;242通过代码函数部署&#34;&gt;2.4.2. 通过代码函数部署
&lt;/h5&gt;&lt;p&gt;区别于镜像方式部署，通过代码部署的云函数拉取代码的耗时会比镜像耗时小&lt;/p&gt;
&lt;p&gt;创建函数的方式以下图例子方式创建即可，其它步骤同镜像部署&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/fb824ab3f171b3d09f763eb217d43fe1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;app.py代码使用前面的代码范例即可&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用云函数的CLI工具能更快速（秒级）的部署MCP Server服务，相对于tke或者CVM部署速度和管理成本极低&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;云函数也支持java，go，nodejs，php的代码&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;25使用云函数的收益&#34;&gt;2.5. 使用云函数的收益
&lt;/h4&gt;&lt;h5 id=&#34;251云函数相比k8s优势&#34;&gt;2.5.1. 云函数相比K8S优势
&lt;/h5&gt;&lt;p&gt;腾讯云云函数（SCF, Serverless Cloud Function）和 Kubernetes（K8s）相比，也有一些明显的优势，尤其是在特定的应用场景下。以下是腾讯云云函数相对于 Kubernetes 的一些优势：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 无服务器架构 (Serverless)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;无需管理基础设施&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数是完全托管的计算服务，用户不需要关注底层服务器、虚拟机、容器集群等基础设施的管理。与此相比，Kubernetes 需要管理集群中的节点、容器生命周期以及各种资源调度。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;自动扩展和缩减&lt;/strong&gt;&lt;br&gt;
：云函数会根据实际的事件或请求数量自动扩展和缩减，用户无需手动配置和调整。Kubernetes 的扩展则需要配置 Horizontal Pod Autoscaling（HPA）或 Vertical Pod Autoscaling（VPA），并且通常还需要设置资源池和负载均衡策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 按需计费&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;按请求和执行时间计费&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数是按请求数和执行时间计费的，用户只需为实际使用的计算资源付费。相比之下，Kubernetes 中通常需要为整个集群中的节点付费，即使节点没有承载任何负载也需要支付固定费用，可能导致资源的浪费。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;零资源消耗&lt;/strong&gt;&lt;br&gt;
：当没有请求时，云函数不会消耗任何计算资源，而 Kubernetes 需要至少保持最小的节点运行状态，即使没有容器或任务需要处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 简化的运维和管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;自动化运维&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数完全托管，自动管理所有的计算资源和基础设施，包括计算、存储和网络资源，减少了运维负担。相比之下，Kubernetes 需要用户自己管理集群、节点、负载均衡、网络配置等，增加了运维复杂度。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;无需管理容器或集群&lt;/strong&gt;&lt;br&gt;
：云函数抽象了底层容器或虚拟机的管理，用户只需关注业务逻辑，而 Kubernetes 则需要开发者管理容器化应用的构建、镜像推送、容器调度、服务暴露等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 快速部署和启动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;快速响应时间&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数是事件驱动的，可以在几毫秒内响应并启动，特别适合短时间、瞬时计算的任务。Kubernetes 的容器虽然也支持快速启动，但仍然需要更多的时间来调度和运行，尤其是涉及到节点的资源分配和容器的启动。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;简化的部署流程&lt;/strong&gt;&lt;br&gt;
：云函数支持从代码直接部署，不需要预先构建和管理镜像，而 Kubernetes 通常要求将应用打包为容器镜像，推送到容器注册表并进行部署。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 事件驱动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;无缝与事件源集成&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数能够直接与腾讯云其他服务（如对象存储 COS、消息队列 CKafka、数据库等）进行事件驱动的集成，支持自动触发，简化了应用架构的设计。Kubernetes 虽然也能与事件源进行集成，但通常需要额外的配置和工具（如通过消息队列或触发器调度 Pod）。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;自动触发&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数可以轻松响应云端各种事件，如文件上传、数据库变更、HTTP 请求等，而 Kubernetes 通常需要设置外部系统来触发容器启动或服务处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. 自动弹性伸缩&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;无限扩展&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数能够根据请求自动扩展，支持从零到上千个实例的快速扩展，用户无需担心如何管理资源的扩展和缩减。Kubernetes 需要手动配置集群的资源池，并根据需要调整节点或Pod数量。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;零延迟扩展&lt;/strong&gt;&lt;br&gt;
：云函数可以非常迅速地应对突发流量，Kubernetes 可能需要一定的时间来扩展节点并启动新容器，特别是在大规模应用中，可能会受到集群资源的限制。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7. 低成本和高效能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;精细的资源使用&lt;/strong&gt;&lt;br&gt;
：由于按执行时间和请求数计费，云函数的资源利用率非常高，能够确保不浪费资源。在 Kubernetes 中，虽然容器也可以相对轻量化，但资源消耗依赖于集群中配置的节点大小和容器数量。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;无闲置成本&lt;/strong&gt;&lt;br&gt;
：Kubernetes 集群中即使没有请求，节点也可能保持活动，用户仍然需要为空闲的资源支付费用。而云函数在没有请求时完全不消耗资源，从而降低了成本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8. 开发和调试简化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;简单的开发流程&lt;/strong&gt;&lt;br&gt;
：开发者只需要关注代码的实现，上传到腾讯云云函数即可，开发和部署非常快速。而 Kubernetes 通常要求开发者将应用容器化，构建镜像、推送到容器注册表，并配置复杂的部署管道。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;内置集成调试工具&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数提供了调试和日志功能，能够方便地查看函数执行过程中的详细日志，帮助开发者快速定位问题。而 Kubernetes 的调试通常涉及到容器日志、Pod 状态和容器的网络配置，调试可能更为复杂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9. 简化的 CI/CD 流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;无缝与 CI/CD 集成&lt;/strong&gt;&lt;br&gt;
：腾讯云云函数可以直接与 CI/CD 工具集成（例如腾讯云开发工具、GitHub 等），实现自动化的代码部署。Kubernetes 则需要手动配置持续集成和持续交付流程，并且通常需要更多的工具和管理。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;快速更新&lt;/strong&gt;&lt;br&gt;
：云函数支持快速更新和版本管理，开发者可以轻松更新代码并部署。Kubernetes 则需要通过滚动更新或蓝绿部署等方式来更新容器中的应用，管理相对更复杂。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;腾讯云云函数&lt;/strong&gt;&lt;br&gt;
 的优势在于完全托管的无服务器架构、按需计费、快速启动和事件驱动架构，使得它非常适合用于轻量级、事件驱动的应用场景，尤其是那些短时间、瞬时任务和弹性伸缩需求较高的场景。与此相比，&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;br&gt;
 更适合需要大规模、高度可配置、容器化管理的长时间运行的应用，尤其是在复杂的微服务架构中，Kubernetes 提供了更高的控制权和灵活性，但也增加了更多的管理复杂度。&lt;/p&gt;
&lt;p&gt;如果你需要快速部署、低成本、简单运维的应用，云函数可能是更好的选择；如果你需要更复杂的应用架构、容器编排和集群管理，Kubernetes 则可能更适合。&lt;/p&gt;
&lt;h5 id=&#34;252基于cube底座的云函数&#34;&gt;2.5.2. 基于Cube底座的云函数
&lt;/h5&gt;&lt;p&gt;云函数是基于Cube安全容器来打造的Serverless服务，Cube 提供了高并发，高密度部署的运行环境，使Serverless场景下的安全容器的交付更加迅速，并在有限空间内提供高性能、低开销的解决方案。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e49fc3e97cd18ab192c66b0818555428.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;并且通过CubeGW打通云函数和用户VPC网络，用户可以使用MCP来操作VPC内资源，比如数据库的操作，内部系统的访问等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/adec5a3f4c4eebd72e134dca3a8f5fa9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;使用基于Cube底座的云函数，具备强隔离的安全性，灵活的规格可以支撑0.1C64M的MCP Server实例，启动速度在100ms以内（不包括mcp server启动时间）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/433dcd034b83471c276ff4f4ee479128.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;253cube安全容器优势&#34;&gt;2.5.3. Cube安全容器优势
&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;Cube****安全容器&lt;/strong&gt;&lt;br&gt;
在 AI 代理（AI Agent）和 MCP（模型上下文协议）方面，相较于传统的 Kubernetes (K8s) 和虚拟机 (VM)，具有以下优势：&lt;/p&gt;
&lt;p&gt;**1.**&lt;strong&gt;更高的安全性和隔离性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Cube&lt;/strong&gt;&lt;br&gt;
使用安全容器技术，提供比传统容器更强的隔离性。每个容器都运行在独立的安全环境中，能够有效防止容器之间的攻击或数据泄漏，特别是在多租户环境中。对于 AI 代理和 MCP 服务器，这种强隔离能够确保不同代理或工具之间的操作不会互相影响，减少了潜在的安全风险。&lt;/p&gt;
&lt;p&gt;● 相比之下，&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;br&gt;
 和传统的虚拟机通常需要额外的配置来实现类似的隔离效果。Kubernetes 在多租户场景下的容器隔离依赖于操作系统的安全性，而虚拟机虽然提供更强的隔离，但由于资源消耗较大，可能无法高效处理大量小规模的容器化任务。&lt;/p&gt;
&lt;p&gt;**2.**&lt;strong&gt;更轻量的资源消耗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Cube安全容器&lt;/strong&gt;&lt;br&gt;
比传统虚拟机轻量，具有虚拟机的隔离性，但启动时间和资源消耗接近容器。这使得它特别适合用于那些需要高度并发和快速响应的 AI 代理和 MCP 服务器场景，例如短期的推理请求、实时数据处理等。相对于虚拟机，Cube 容器能更高效地利用计算资源，减少开销。&lt;/p&gt;
&lt;p&gt;● 在 &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;br&gt;
 和 &lt;strong&gt;虚拟机&lt;/strong&gt;&lt;br&gt;
 中，虚拟机的资源消耗较高，启动时间较长，尤其是在多实例部署的场景下，K8s 集群的扩展可能会受到资源瓶颈的限制。而 Cube 的轻量级特性使得在这些场景中更具优势，尤其是对于需要弹性扩展的应用。&lt;/p&gt;
&lt;p&gt;**3.**&lt;strong&gt;快速启动和高效扩展&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Cube****安全容器&lt;/strong&gt;&lt;br&gt;
 提供接近容器的启动速度，但又具有虚拟机级别的隔离性，非常适合动态扩展的需求，例如 AI 代理需要快速启动多个实例来处理突发流量或大规模请求。在 Serverless 架构中，这种快速扩展的能力尤为重要，可以减少冷启动延迟，提高响应速度。&lt;/p&gt;
&lt;p&gt;● 与传统的 &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;br&gt;
 或 &lt;strong&gt;虚拟机&lt;/strong&gt;&lt;br&gt;
 相比，Cube 容器的启动时间远远快于虚拟机，能够在高负载和高并发场景中提供更好的性能表现。&lt;/p&gt;
&lt;p&gt;**4.**&lt;strong&gt;容器与虚拟化的完美平衡&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Cube****安全容器&lt;/strong&gt;&lt;br&gt;
 提供了容器的轻量级特性和虚拟机的隔离性，弥补了传统容器的不足。AI 代理和 MCP 服务器通常需要频繁与外部工具和数据源交互，容器化方式能够提高服务部署和管理的效率，Cube 的虚拟化特性进一步确保了在复杂场景下的高安全性和稳定性。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;虚拟机&lt;/strong&gt;&lt;br&gt;
 虽然提供更强的隔离，但其资源开销较大，启动速度较慢，通常不适合用来处理高频、短时任务。而 &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;br&gt;
 本身并不提供虚拟化隔离，它依赖于容器和节点来提供服务，这会在某些高安全要求的场景中带来风险，尤其是当多个用户或服务共享同一 Kubernetes 集群时。&lt;/p&gt;
&lt;p&gt;**5.**&lt;strong&gt;与 AI 和 MCP 的集成优势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;AI 代理和 MCP 服务器&lt;/strong&gt;&lt;br&gt;
 需要快速处理大量数据并进行实时推理，尤其是在 AI 推理请求和数据交互密集的场景中。&lt;strong&gt;Cube****安全容器&lt;/strong&gt;&lt;br&gt;
 能够为这些任务提供快速响应和动态扩展，同时保留虚拟机级别的安全隔离特性，从而提供更好的服务质量。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;br&gt;
 在大规模分布式部署和容器管理方面的优势毋庸置疑，但对于需要更高隔离性和快速响应的场景，&lt;strong&gt;Cube 安全容器&lt;/strong&gt;&lt;br&gt;
 提供了更好的选择。特别是在处理敏感数据或需要高安全性和资源隔离的任务时，Cube 提供了容器和虚拟机的最佳平衡。&lt;/p&gt;
&lt;p&gt;**6.**&lt;strong&gt;更好的资源调度与成本优化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Cube****安全容器&lt;/strong&gt;&lt;br&gt;
 能够高效地调度资源并优化成本，它在提供虚拟机隔离的同时，减少了虚拟机带来的资源消耗和成本。对于需要频繁扩展和收缩的 AI 代理和 MCP 服务器场景，Cube 容器提供了较传统虚拟机或 Kubernetes 更加高效的解决方案，减少了因过度预分配资源而产生的浪费。&lt;/p&gt;
&lt;p&gt;● 传统的 &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;br&gt;
 需要配置和管理节点，并且节点上常常有较多的资源冗余，造成资源浪费。而 &lt;strong&gt;Cube 容器&lt;/strong&gt;&lt;br&gt;
 能够在提供虚拟机级别的隔离的同时，减少这些冗余。&lt;/p&gt;
&lt;p&gt;**7.**&lt;strong&gt;容器化与虚拟化的一体化管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;Cube****安全容器&lt;/strong&gt;&lt;br&gt;
 提供了统一的容器化与虚拟化管理体验，简化了基础设施的管理和运维。相比于 Kubernetes 需要通过多个组件来管理容器和虚拟机，Cube 可以提供一体化的解决方案，降低管理复杂度，尤其适合多租户的 AI 和 MCP 部署。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：Cube&lt;strong&gt;&lt;strong&gt;安全容器&lt;/strong&gt;&lt;/strong&gt;在 AI 代理与 MCP 部署中的优势&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cube****安全容器&lt;/strong&gt;&lt;br&gt;
 是一种高效、轻量、安全的容器化技术，特别适合 AI 代理和 MCP 服务器的动态扩展与快速响应需求。它在提供容器的灵活性和虚拟机的隔离性方面找到了完美的平衡，能够在多租户、高安全性需求的场景中提供显著优势。相比于传统的 &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;br&gt;
 和 &lt;strong&gt;虚拟机&lt;/strong&gt;&lt;br&gt;
，Cube 更适合处理那些需要快速扩展、低延迟、强隔离的任务，特别是在 Serverless 架构下，能够为 AI 和 MCP 提供更高效、可靠和安全的运行环境。&lt;/p&gt;
&lt;h4 id=&#34;26ai-on-serverless&#34;&gt;2.6. AI On Serverless
&lt;/h4&gt;&lt;p&gt;将&lt;strong&gt;模型上下文协议（MCP）&lt;/strong&gt;&lt;br&gt;
 与 &lt;strong&gt;AI 代理（AI Agent）&lt;/strong&gt;&lt;br&gt;
 部署在无服务器（Serverless）架构上，展现出显著的优势：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 模型上下文协议（MCP）与无服务器架构的结合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MCP 旨在为大型语言模型（LLM）提供标准化的接口，使其能够连接和交互外部数据源和工具。在无服务器架构中，MCP 服务器可以作为轻量级的执行单元，动态处理 AI 代理的请求。这种结合带来了以下好处：&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;弹性扩展&lt;/strong&gt;&lt;br&gt;
：无服务器平台根据需求自动分配资源，确保 MCP 服务器在高负载时能够扩展，满足大量并发请求的处理需求。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;按需计费&lt;/strong&gt;&lt;br&gt;
：用户仅为实际使用的计算资源付费，避免了资源闲置带来的成本浪费。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;简化运维&lt;/strong&gt;&lt;br&gt;
：无服务器架构由云服务商管理基础设施，开发者专注于业务逻辑的实现，减少了运维复杂度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. AI 代理与无服务器架构的结合&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AI 代理是能够自主执行任务的智能实体，需要频繁访问外部工具和数据源。无服务器架构为 AI 代理提供了以下优势：&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;高可用性&lt;/strong&gt;&lt;br&gt;
：无服务器平台通常具备高可用性和容错性，确保 AI 代理在各种条件下稳定运行。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;快速响应&lt;/strong&gt;&lt;br&gt;
：无服务器函数的快速启动时间有助于 AI 代理及时响应外部事件和请求。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;灵活性&lt;/strong&gt;&lt;br&gt;
：无服务器架构支持事件驱动的执行模型，AI 代理可以根据不同事件触发相应的功能，提高系统的灵活性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. MCP 和 AI 代理在无服务器架构中的协同作用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将 MCP 与 AI 代理部署在无服务器架构中，二者相互补充，优势互补：&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;标准化通信&lt;/strong&gt;&lt;br&gt;
：MCP 提供统一的通信协议，使 AI 代理能够高效地与各种数据源和工具交互。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;动态资源分配&lt;/strong&gt;&lt;br&gt;
：无服务器平台根据实际需求动态分配资源，确保 MCP 服务器和 AI 代理在高负载时获得足够的计算能力。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;简化开发流程&lt;/strong&gt;&lt;br&gt;
：开发者可以专注于业务逻辑的实现，无需关心基础设施的管理，提高了开发效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 适用场景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将 MCP 和 AI 代理部署在无服务器架构上，适用于以下场景：&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;动态生成 AI 代理&lt;/strong&gt;&lt;br&gt;
：随着业务需求变化，动态生成和部署大量 AI 代理，利用无服务器架构的弹性满足计算资源的波动需求。&lt;/p&gt;
&lt;p&gt;● &lt;strong&gt;工具和数据源集成&lt;/strong&gt;&lt;br&gt;
：需要将 AI 代理与多种工具和数据源集成的场景，MCP 提供了标准化的集成方式，简化了开发和维护工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 结论&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;综合来看，将 MCP 和 AI 代理部署在无服务器架构上，是一种非常契合的组合，能够充分发挥各自的优势。这种架构在需要高弹性、动态扩展和简化运维的场景中，表现尤为出色。然而，具体的应用效果还需根据实际业务需求和技术环境进行评估和实施。&lt;/p&gt;
&lt;h4 id=&#34;27应用场景&#34;&gt;2.7. 应用场景
&lt;/h4&gt;&lt;p&gt;1.访问数据库的MCP Server访问内部数据库进行数据分析&lt;/p&gt;
&lt;p&gt;2.通过云API的MCP Server管理资源&lt;/p&gt;
&lt;p&gt;3.通过CLS的MCP Server来进行日志的分析&lt;/p&gt;
&lt;p&gt;4.通过云监控的MCP Server分析系统运行状态&lt;/p&gt;
&lt;p&gt;5.通过云函数的MCP Server来调度云函数的Job以及各种ai agent服务&lt;/p&gt;
&lt;p&gt;6.基于云函数执行Puppeteer实现爬虫或者页面操作任务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e7c079505661a80e3f02e592471a5f49.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>当 MCP 遇上 Serverless，AI 时代的最佳搭档</title>
        <link>https://ai.programnotes.cn/p/%E5%BD%93-mcp-%E9%81%87%E4%B8%8A-serverlessai-%E6%97%B6%E4%BB%A3%E7%9A%84%E6%9C%80%E4%BD%B3%E6%90%AD%E6%A1%A3/</link>
        <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/%E5%BD%93-mcp-%E9%81%87%E4%B8%8A-serverlessai-%E6%97%B6%E4%BB%A3%E7%9A%84%E6%9C%80%E4%BD%B3%E6%90%AD%E6%A1%A3/</guid>
        <description>&lt;p&gt;&lt;strong&gt;源自&lt;/strong&gt; | 墨飏 阿里云云原生&lt;/p&gt;
&lt;p&gt;核心内容点：MCP, Serverless, 智能体, 弹性算力,  数据安全&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/087ee75c2a26ff67233996986126ecfa.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;随着 AI 技术的飞速发展，MCP（模型上下文协议） 逐渐崭露头角。这项由 Anthropic 公司（Claude 的创造者）于 2024 年 11 月推出的开放协议，正在重新定义 AI 与数字世界的交互方式。&lt;br&gt;
这项开放协议不仅让 AI 突破传统对话边界，更赋予其执行现实任务的能力，堪称人工智能向&amp;quot;行动智能体&amp;quot;进化的里程碑。&lt;strong&gt;然而从火热概念到落地业务，MCP 还需要找到云端“好搭档”。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;****从 LLM 到 MCP 的进化之路Cloud Native&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;悬崖跳舞 or 火山口野餐？&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;从传统 LLM 到 MCP 的进化之路，本质上是一场关于数据交互安全的范式革命。&lt;/p&gt;
&lt;p&gt;在传统的 AI 应用中，语言模型在处理用户数据时，开发者往往面临非此即彼的困境：要么像传统聊天场景那样将数据全量上传至云端（但面临隐私泄露风险和数据规模限制），要么赋予模型 Open Interpreter 式的本地管理员权限（可能因恶意代码执行导致系统沦陷）。&lt;strong&gt;这种&amp;quot;全有或全无&amp;quot;的安全策略，就像让用户选择在悬崖边跳舞还是在火山口野餐。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/224b666e58d883d8d495966f73b4b623.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;然而 MCP 协议的出现从根本上解决了用户的两难困境：MCP 协议的突破性在于构建了智能交互的&lt;br&gt;
标准范式&lt;br&gt;
。通过标准化的通信协议，它在模型与数据源之间建立了安全隔离带。想象一下，当你用 LLM 分析财务数据时，&lt;strong&gt;MCP 允许模型像外科医生一样通过标准接口&amp;quot;零接触式&amp;quot;实施“远程手术”。这意味着既不需要将敏感报表上传至云端，也不必开放整个本地文件系统&lt;/strong&gt;&lt;br&gt;
。这种设计类似操作系统的沙箱技术，不可信进程或不可信代码必须运行在虚拟环境，通过隔离的上下文环境访问受限数据，从而减少被攻击面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，过多的安全设计往往会带来开放性的损失，MCP 优化了安全的风险，也需考虑开发者的“开放性”诉求。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/fb94c1b147e8c9cad0cc49e007bde238.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从风格各异到风格统一&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;
&lt;/h2&gt;&lt;p&gt;MCP 将不同工具开发者的“个人风格”抽象为统一接口，就像为 AI 世界制定了通用的 USB-C 规范。无论是本地 SQL 数据库还是云端 API，开发者只需实现标准协议即可对接，这&lt;strong&gt;显著降低了工具开发和智能体集成工具的边际成本&lt;/strong&gt;&lt;br&gt;
。SaaS 厂商和独立开发者将最先从 MCP 的“开放性”受益，MCP 的火热也为这批成功的“尝鲜者”带来巨大的访问流量激增。根据统计，Github MCP Server 的 star 数 2 周内从 0 增长到 4.3k，Figma MCP Server 的 star 数 6 周内从 0 增长到 4.4k。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是，MCP 仍只是智能应用的过程工具，MCP 要走向智能体，协助智能体完成任务协作。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/69639d952948c5354876125f51ea0a43.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1cf31c3750c690c540757058b1440b5a.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;爆火之后，算力成新问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MCP 降低了智能体接入工具的门槛。以近期大火的 OpenManus（4周内 star 从 0 到 40k） 为例，不同于大模型“大而全”的响应模式，OpenManus 的特点是极简可插拔框架，通过模块化、可扩展的工具集，以 ReAct 模式，以工具为核心驱动 Agent 的行动，逐步解决复杂的真实世界问题。在 OpenManus 这套多模型、多工具的设计方案中，工具调用的频次由大模型结合提示词进行“&lt;br&gt;
规划→分配→执行”，&lt;strong&gt;调用热点不可预测，一旦出现热点工具算力层面不足而产生报错/卡顿现象，将会极大降低 OpenManus 智能体的任务协作效率。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1829ce2e828a3acd20e84fe267480f0c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Serverless 解决算力不足的「破窗效应」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Serverless 提供的弹性算力重构智能体协作范式，突破资源静态分配桎梏，使得高频 MCP Server 具备毫秒级扩缩容能力实现流量自适应，低频 MCP Server 则自动休眠成本趋近于零。智能体的执行效率依赖子任务的执行成功率，子任务的执行成功率则受到工具调用失败/卡顿的影响，特别是热点工具的调用失败/卡顿极易引发“破窗效应”，导致错误无限扩展，无法达成规划目标。为 MCP 服务/工具提供 Serverless 弹性算力是最优解决方案。&lt;/p&gt;
&lt;p&gt;Serverless：MCP 落地的“最佳搭档”Cloud Native&lt;/p&gt;
&lt;p&gt;Serverless 与 MCP 珠联璧合，是云原生架构与 AI 协议标准的&amp;quot;化学反应&amp;quot;。当 MCP 试图构建 AI 世界的通用接口时，Serverless 提供了最佳运行环境 - 就像 USB-C 设备仍需要配备自适应功率的电源适配器才可适配不同的电压标准。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0a5036959b7e1b46186555d235cdf359.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;其技术协同性体现在三个维度：&lt;/p&gt;
&lt;p&gt;弹性扩展与按需计费：&lt;br&gt;
MCP 服务天然适配 Serverless 的事件驱动模型。例如当 LLM 发起数据库查询时，函数计算即时冷启动执行 SQL 解析，响应完成后立即释放资源。实测数据显示，这种模式相比常驻容器节省 83% 的计算成本。&lt;/p&gt;
&lt;p&gt;安全沙箱与零信任架构&lt;br&gt;
：&lt;br&gt;
Serverless 的临时执行环境完美契合 MCP 服务的安全隔离需求。每个 MCP 请求都在独立的上下文中处理，执行完毕后自动销毁实例，消除传统常驻服务的上下文残留，降低数据泄露风险。&lt;/p&gt;
&lt;p&gt;生态集成与敏捷交付：&lt;br&gt;
阿里云 Serverless 平台已内置 MCP 运行时。开发者通过函数计算 FC 控制台可直接部署预置的 MCP 模版，如函数计算的 &amp;ldquo;amap-maps-mcp-server&amp;rdquo; 模版可在 30 秒内完成和高德地图的服务对接。&lt;/p&gt;
&lt;p&gt;这种组合正在重塑 AI 应用架构。&lt;br&gt;
某出行科技公司的实践显示，其基于 FC+ MCP 构建的智能体系统，在应对突发流量时展现出显著优势：当流量波动引发工具调用洪峰（QPS 从 50 激增至 2000），系统在 500 毫秒内自动扩展出 200 个可并行执行的 MCP 函数实例，全程未触发任何限流告警。这印证了 Serverless 作为 MCP &amp;ldquo;弹性算力&amp;quot;的核心价值 - 让 MCP 既具备协议标准的统一性，又拥有云原生的弹性基因。&lt;/p&gt;
&lt;p&gt;立即体验：一键部署热门 MCP ServerCloud Native&lt;/p&gt;
&lt;p&gt;接下来您可以跟着教程快速实现开源 MCP Server 一键托管，假如您搭建的 AI Agent 中需要加入导航服务，您可能会需要高德社区提供的 MCP Server ，接下来我们将以开源项目 amap-maps-mcp-server 为例演示如何一键部署 MCP Server 到函数计算 FC 上，后续您可以在不同工具（如 Cherry-Studio、Cline 和 Cursor）中继续配置云端 MCP 服务。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;第一步： 模版部署&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;点击【1】进入CAP控制台。填入从高德开发者申请的 Token（立刻申请完成），&lt;br&gt;
可以在【2】&lt;br&gt;
申请。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/73c100681b65b142d2d513add98aa00b.other&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;第二步： 测试 MCP Server 提供的工具能力&lt;/p&gt;
&lt;p&gt;部署成功之后，通过触发器页面，拿到测试 URL 可对当前 MCP Server 进行测试。如果希望将部署的 MCP Server 用于生产，建议使用自定义域名代替测试 URL。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/83a13de547df1db2fde80f63157e45bb.other&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;测试步骤一：本地终端运行命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npx @modelcontextprotocol/inspector  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/7db5677320c2cc28a59479a40e4dc8ec.other&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;测试步骤二：浏览器中打开本地提供的测试地址“&lt;br&gt;
http://localhost:5173/#tools&lt;br&gt;
”进行测试，在 URL 表单中填入上面获取的 URL，添加 /sse 后缀填入 URL 表单中，点击 Connect 会看到开源 MCP Server 提供的 Tools 列表，可以点击置顶 Tool 进行交互验证。&lt;br&gt;
  &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/108f8f05a2f8d71b9a09de744c05fb98.other&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;如果您对于产品有更多建议或者对 MCP server 云端托管有更多想法可以加入钉钉群（群号：64970014484）与我们取得联系。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;更多开源 MCP Server 一键部署&lt;/strong&gt;&lt;br&gt;
  &lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 28.5pt;visibility: visible;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border: 1px solid rgb(221, 221, 221);max-width: 100%;box-sizing: border-box !important;height: 28.5pt;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;MCP 开源地址&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: 1px solid rgb(221, 221, 221);border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;编程语言&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: 1px solid rgb(221, 221, 221);border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;一键部署&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: 1px solid rgb(221, 221, 221);border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;Server 类型&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 140.5pt;visibility: visible;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 140.5pt;visibility: visible;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;https://github.com/baidu-maps/mcp/tree/main/src/baidu-map/node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-nodejs-baidu-map&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 112.5pt;visibility: visible;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 112.5pt;visibility: visible;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/github&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-github&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 112.5pt;visibility: visible;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 112.5pt;visibility: visible;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/everart&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-ever-art&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 112.5pt;visibility: visible;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 112.5pt;visibility: visible;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/fetch&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;Python&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-fetch&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;visibility: visible;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;visibility: visible;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 126.5pt;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 126.5pt;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-brave-search&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 112.5pt;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 112.5pt;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/time&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;Python&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-time&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 126.5pt;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 126.5pt;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://github.com/devsapp/amap-maps-mcp-server&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-amap-maps&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 126.5pt;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 126.5pt;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/everything&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-everything&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;sse&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 140.5pt;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 140.5pt;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-aws-kb-retrieval-server&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 112.5pt;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 112.5pt;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-gitlab&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 140.5pt;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 140.5pt;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://cap.console.aliyun.com/template-detail?template=start-mcp-puppeteer&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;sse&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;height: 126.5pt;&#34;&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: 1px solid rgb(221, 221, 221);border-image: initial;max-width: 100%;box-sizing: border-box !important;height: 126.5pt;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;Node&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;https://cap.console.aliyun.com/create-project?template=start-mcp-sequentialthinking&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;td data-colwidth=&#34;69&#34; width=&#34;69&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 5px 10px;outline: 0px;overflow-wrap: break-word !important;word-break: break-all;hyphens: auto;border-top: none;border-right: 1px solid rgb(221, 221, 221);border-bottom: 1px solid rgb(221, 221, 221);border-left: none;border-image: initial;max-width: 100%;box-sizing: border-box !important;&#34;&gt;&lt;section style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;&lt;span leaf=&#34;&#34; style=&#34;-webkit-tap-highlight-color: transparent;margin: 0px;padding: 0px;outline: 0px;max-width: 100%;box-sizing: border-box !important;overflow-wrap: break-word !important;&#34;&gt;mcp-proxy&lt;/span&gt;&lt;/section&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;  
&lt;p&gt;【1】https://cap.console.aliyun.com/create-project?template=start-mcp-amap-maps&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://lbs.amap.com/api/webservice/create-project-and-key&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;点击,立即体验&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
