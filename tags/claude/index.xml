<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Claude on AI</title>
        <link>https://ai.programnotes.cn/tags/claude/</link>
        <description>Recent content in Claude on AI</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Fri, 12 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://ai.programnotes.cn/tags/claude/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Qwen3-Next-80B-A3B系列模型发布；Claude上线记忆功能【AI 早报 2025-09-12】</title>
        <link>https://ai.programnotes.cn/p/qwen3-next-80b-a3b%E7%B3%BB%E5%88%97%E6%A8%A1%E5%9E%8B%E5%8F%91%E5%B8%83claude%E4%B8%8A%E7%BA%BF%E8%AE%B0%E5%BF%86%E5%8A%9F%E8%83%BDai-%E6%97%A9%E6%8A%A5-2025-09-12/</link>
        <pubDate>Fri, 12 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/qwen3-next-80b-a3b%E7%B3%BB%E5%88%97%E6%A8%A1%E5%9E%8B%E5%8F%91%E5%B8%83claude%E4%B8%8A%E7%BA%BF%E8%AE%B0%E5%BF%86%E5%8A%9F%E8%83%BDai-%E6%97%A9%E6%8A%A5-2025-09-12/</guid>
        <description>&lt;p&gt;Intro: 00:00&lt;/p&gt;
&lt;p&gt;⬛️ Qwen发布Qwen3-Next-80B-A3B系列模型: 00:10&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://qwen.ai/blog?id=4074cca80393150c248e508aa62983f9cb7d27cd&amp;amp;from=research.latest-advancements-list&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://qwen.ai/blog?id=4074cca80393150c248e508aa62983f9cb7d27cd&amp;from=research.latest-advancements-list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/collections/Qwen/qwen3-next-68c25fd6838e585db8eeea9d&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://huggingface.co/collections/Qwen/qwen3-next-68c25fd6838e585db8eeea9d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ Claude上线&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV16uHBzjEh1&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Qwen团队将发Qwen3-Next系列；Claude新增文件创建编辑 【AI早报 2025-09-10】</title>
        <link>https://ai.programnotes.cn/p/qwen%E5%9B%A2%E9%98%9F%E5%B0%86%E5%8F%91qwen3-next%E7%B3%BB%E5%88%97claude%E6%96%B0%E5%A2%9E%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E7%BC%96%E8%BE%91-ai%E6%97%A9%E6%8A%A5-2025-09-10/</link>
        <pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/qwen%E5%9B%A2%E9%98%9F%E5%B0%86%E5%8F%91qwen3-next%E7%B3%BB%E5%88%97claude%E6%96%B0%E5%A2%9E%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E7%BC%96%E8%BE%91-ai%E6%97%A9%E6%8A%A5-2025-09-10/</guid>
        <description>&lt;p&gt;Intro: 00:00&lt;/p&gt;
&lt;p&gt;⬛️ Qwen即将发布Qwen3-Next系列: 00:09&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://github.com/huggingface/transformers/pull/40771&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/huggingface/transformers/pull/40771&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ Claude上线文件创建编辑: 00:23&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://www.anthropic.com/news/create-files&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.anthropic.com/news/create-files&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://support.anthropic.com/en/articles/12111783-create-and-edit-files-wit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://support.anthropic.com/en/articles/12111783-create-and-edit-files-wit&lt;/a&gt;&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1GxHSzNEYH&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Claude网页端免费体验Opus；Kiro免费使用至9月15日【AI 早报 2025-08-30】</title>
        <link>https://ai.programnotes.cn/p/claude%E7%BD%91%E9%A1%B5%E7%AB%AF%E5%85%8D%E8%B4%B9%E4%BD%93%E9%AA%8Copuskiro%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E8%87%B39%E6%9C%8815%E6%97%A5ai-%E6%97%A9%E6%8A%A5-2025-08-30/</link>
        <pubDate>Sat, 30 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/claude%E7%BD%91%E9%A1%B5%E7%AB%AF%E5%85%8D%E8%B4%B9%E4%BD%93%E9%AA%8Copuskiro%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E8%87%B39%E6%9C%8815%E6%97%A5ai-%E6%97%A9%E6%8A%A5-2025-08-30/</guid>
        <description>&lt;p&gt;Intro: 00:00&lt;/p&gt;
&lt;p&gt;⬛️ Claude 应用提供 Opus 4.1 免费体验: 00:10&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://x.com/btibor91/status/1961381997491982391&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://x.com/btibor91/status/1961381997491982391&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ Kiro保持免费至9月15日，将调整新定价方案: 00:19&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://kiro.dev/blog/free-until-september-15&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://kiro.dev/blog/free-until-september-15&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ Microsoft Copilot Labs 新增音频表达功能: 00:29&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://copilot.micros&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://copilot.micros&lt;/a&gt;&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1CGhezcE4A&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Anthropic 推出 Claude Chrome 扩展，实现浏览器自动化</title>
        <link>https://ai.programnotes.cn/p/anthropic-%E6%8E%A8%E5%87%BA-claude-chrome-%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%8C%96/</link>
        <pubDate>Wed, 27 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/anthropic-%E6%8E%A8%E5%87%BA-claude-chrome-%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%8A%A8%E5%8C%96/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.anthropic.com/news/claude-for-chrome&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.anthropic.com/news/claude-for-chrome&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.anthropic.com/news/claude-for-chrome&#34;  title=&#34;Claude for Chrome 官方公告&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;完整介绍可参阅 Anthropic 官方新闻页面&lt;/a&gt;。该扩展基于浏览器自动化技术，支持 Claude 直接在浏览器内查看页面、点击按钮、填写表单，甚至代表用户执行操作。如果你感兴趣，也可以在 &lt;a class=&#34;link&#34; href=&#34;http://claude.ai/chrome&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://claude.ai/chrome&lt;/a&gt; 填写表单加入候补名单哦&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1eQekz7EGF&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Claude Code 最佳实践</title>
        <link>https://ai.programnotes.cn/p/claude-code-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Thu, 21 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/claude-code-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h2 id=&#34;claude-code代理式编码的最佳实践&#34;&gt;Claude Code：代理式编码的最佳实践
&lt;/h2&gt;&lt;p&gt;Claude Code 是一款用于代理式编码（agentic coding）的命令行工具。本文将介绍一些在使用 Claude Code 过程中，跨越不同代码库、语言和环境时被证明行之有效的技巧和窍门。&lt;/p&gt;
&lt;p&gt;我们最近发布了 Claude Code，这是一款用于代理式编码的命令行工具。作为一项研究项目，Claude Code 为 Anthropic 的工程师和研究人员提供了一种更原生的方式，将 Claude 集成到他们的编码工作流中。&lt;/p&gt;
&lt;p&gt;Claude Code 故意设计得底层且不固执己见，提供近乎原始的模型访问权限，而不强加特定的工作流。这种设计理念创造了一个灵活、可定制、可编写脚本且功能强大的安全工具。虽然功能强大，但这种灵活性也给刚接触代理式编码工具的工程师带来了一定的学习曲线——至少在他们形成自己的最佳实践之前是这样。&lt;/p&gt;
&lt;p&gt;本文概述了一些通用的模式，这些模式在 Anthropic 的内部团队和外部工程师在各种代码库、语言和环境中使用 Claude Code 时都被证明是有效的。此列表中的任何内容都不是一成不变的，也不是普遍适用的；请将这些建议视为起点。我们鼓励您进行实验，找到最适合您的方法！&lt;/p&gt;
&lt;p&gt;想了解更详细的信息吗？我们在 claude.ai/code 上的综合文档涵盖了本文提到的所有功能，并提供了额外的示例、实现细节和高级技术。&lt;/p&gt;
&lt;h3 id=&#34;1-自定义您的设置&#34;&gt;1. 自定义您的设置
&lt;/h3&gt;&lt;p&gt;Claude Code 是一个代理式编码助手，它会自动将上下文提取到提示中。这种上下文收集会消耗时间和 token，但您可以通过环境调整来优化它。&lt;/p&gt;
&lt;h4 id=&#34;a-创建-claudemd-文件&#34;&gt;a. 创建 &lt;code&gt;CLAUDE.md&lt;/code&gt; 文件
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;CLAUDE.md&lt;/code&gt; 是一个特殊文件，Claude 在开始对话时会自动将其提取到上下文中。这使其成为记录以下内容的理想场所：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用的 bash 命令&lt;/li&gt;
&lt;li&gt;核心文件和实用函数&lt;/li&gt;
&lt;li&gt;代码风格指南&lt;/li&gt;
&lt;li&gt;测试说明&lt;/li&gt;
&lt;li&gt;代码仓库礼仪（例如，分支命名、merge vs. rebase 等）&lt;/li&gt;
&lt;li&gt;开发环境设置（例如，pyenv 的使用、哪些编译器可用）&lt;/li&gt;
&lt;li&gt;项目特有的任何意外行为或警告&lt;/li&gt;
&lt;li&gt;您希望 Claude 记住的其他信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;CLAUDE.md&lt;/code&gt; 文件没有固定的格式。我们建议保持其简洁易读。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# Bash 命令
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; npm run build: 构建项目
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; npm run typecheck: 运行类型检查器
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# 代码风格
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 使用 ES 模块 (import/export) 语法，而不是 CommonJS (require)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 尽可能解构导入 (例如 import { foo } from &amp;#39;bar&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;# 工作流
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gh&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 在完成一系列代码更改后，请务必进行类型检查
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; 为提高性能，优先运行单个测试，而不是整个测试套件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;您可以将 &lt;code&gt;CLAUDE.md&lt;/code&gt; 文件放置在多个位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;仓库的根目录&lt;/strong&gt;，或您运行 &lt;code&gt;claude&lt;/code&gt; 的任何位置（最常见的用法）。将其命名为 &lt;code&gt;CLAUDE.md&lt;/code&gt; 并检入 git，以便您可以在不同会话和团队之间共享（推荐），或者将其命名为 &lt;code&gt;CLAUDE.local.md&lt;/code&gt; 并将其添加到 &lt;code&gt;.gitignore&lt;/code&gt; 中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行 &lt;code&gt;claude&lt;/code&gt; 的目录的任何父目录&lt;/strong&gt;。这在 monorepo 中最有用，您可能从 &lt;code&gt;root/foo&lt;/code&gt; 运行 &lt;code&gt;claude&lt;/code&gt;，并在 &lt;code&gt;root/CLAUDE.md&lt;/code&gt; 和 &lt;code&gt;root/foo/CLAUDE.md&lt;/code&gt; 中都有 &lt;code&gt;CLAUDE.md&lt;/code&gt; 文件。这两个文件都会被自动提取到上下文中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;运行 &lt;code&gt;claude&lt;/code&gt; 的目录的任何子目录&lt;/strong&gt;。这与上述情况相反，在这种情况下，当您处理子目录中的文件时，Claude 会按需提取 &lt;code&gt;CLAUDE.md&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;您的主文件夹&lt;/strong&gt; (&lt;code&gt;~/.claude/CLAUDE.md&lt;/code&gt;)，它会应用于您所有的 &lt;code&gt;claude&lt;/code&gt; 会话。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当您运行 &lt;code&gt;/init&lt;/code&gt; 命令时，Claude 会自动为您生成一个 &lt;code&gt;CLAUDE.md&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h4 id=&#34;b-调整您的-claudemd-文件&#34;&gt;b. 调整您的 &lt;code&gt;CLAUDE.md&lt;/code&gt; 文件
&lt;/h4&gt;&lt;p&gt;您的 &lt;code&gt;CLAUDE.md&lt;/code&gt; 文件会成为 Claude 提示的一部分，因此应像任何常用提示一样对其进行优化。一个常见的错误是添加大量内容而没有迭代其有效性。花时间进行实验，确定什么能从模型中产生最佳的指令遵循效果。&lt;/p&gt;
&lt;p&gt;您可以手动向 &lt;code&gt;CLAUDE.md&lt;/code&gt; 添加内容，或按 &lt;code&gt;#&lt;/code&gt; 键向 Claude 发出指令，它会自动将其合并到相关的 &lt;code&gt;CLAUDE.md&lt;/code&gt; 中。许多工程师在编码时经常使用 &lt;code&gt;#&lt;/code&gt; 来记录命令、文件和风格指南，然后将 &lt;code&gt;CLAUDE.md&lt;/code&gt; 的更改包含在提交中，以便团队成员也能受益。&lt;/p&gt;
&lt;p&gt;在 Anthropic，我们偶尔会通过提示改进器来运行 &lt;code&gt;CLAUDE.md&lt;/code&gt; 文件，并经常调整指令（例如，用 &amp;ldquo;IMPORTANT&amp;rdquo; 或 &amp;ldquo;YOU MUST&amp;rdquo; 来强调）以提高遵循度。&lt;/p&gt;
&lt;h4 id=&#34;c-管理-claude-允许的工具列表&#34;&gt;c. 管理 Claude 允许的工具列表
&lt;/h4&gt;&lt;p&gt;默认情况下，Claude Code 对任何可能修改您系统的操作都会请求权限：文件写入、许多 bash 命令、MCP 工具等。我们采用这种刻意保守的方法设计 Claude Code，以优先考虑安全性。您可以自定义允许列表，以允许您知道是安全的其他工具，或者允许易于撤销的潜在不安全工具（例如，文件编辑、&lt;code&gt;git commit&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;有四种方法可以管理允许的工具：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在会话期间出现提示时选择“始终允许”。&lt;/li&gt;
&lt;li&gt;启动 Claude Code 后使用 &lt;code&gt;/permissions&lt;/code&gt; 命令添加或删除工具。例如，您可以添加 &lt;code&gt;Edit&lt;/code&gt; 以始终允许文件编辑，&lt;code&gt;Bash(git commit:*)&lt;/code&gt; 以允许 git 提交，或 &lt;code&gt;mcp__puppeteer__puppeteer_navigate&lt;/code&gt; 以允许使用 Puppeteer MCP 服务器进行导航。&lt;/li&gt;
&lt;li&gt;手动编辑您的 &lt;code&gt;.claude/settings.json&lt;/code&gt; 或 &lt;code&gt;~/.claude.json&lt;/code&gt;（我们建议将前者检入源代码控制以与您的团队共享）。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;--allowedTools&lt;/code&gt; CLI 标志进行会话特定的权限设置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;d-如果使用-github请安装-gh-cli&#34;&gt;d. 如果使用 GitHub，请安装 &lt;code&gt;gh&lt;/code&gt; CLI
&lt;/h4&gt;&lt;p&gt;Claude 知道如何使用 &lt;code&gt;gh&lt;/code&gt; CLI 与 GitHub 交互，以创建 issue、打开 pull request、阅读评论等。如果没有安装 &lt;code&gt;gh&lt;/code&gt;，Claude 仍然可以使用 GitHub API 或 MCP 服务器（如果您已安装）。&lt;/p&gt;
&lt;h3 id=&#34;2-为-claude-提供更多工具&#34;&gt;2. 为 Claude 提供更多工具
&lt;/h3&gt;&lt;p&gt;Claude 可以访问您的 shell 环境，您可以在其中为它构建便利的脚本和函数集，就像为自己构建一样。它还可以通过 MCP 和 REST API 利用更复杂的工具。&lt;/p&gt;
&lt;h4 id=&#34;a-将-claude-与-bash-工具结合使用&#34;&gt;a. 将 Claude 与 bash 工具结合使用
&lt;/h4&gt;&lt;p&gt;Claude Code 继承了您的 bash 环境，使其可以访问您的所有工具。虽然 Claude 了解像 unix 工具和 &lt;code&gt;gh&lt;/code&gt; 这样的常用实用程序，但如果没有说明，它不会知道您的自定义 bash 工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;告诉 Claude 工具名称和使用示例。&lt;/li&gt;
&lt;li&gt;告诉 Claude 运行 &lt;code&gt;--help&lt;/code&gt; 查看工具文档。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;CLAUDE.md&lt;/code&gt; 中记录常用工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;b-将-claude-与-mcp-结合使用&#34;&gt;b. 将 Claude 与 MCP 结合使用
&lt;/h4&gt;&lt;p&gt;Claude Code 同时充当 MCP 服务器和客户端。作为客户端，它可以通过三种方式连接到任意数量的 MCP 服务器以访问其工具：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在项目配置中（在项目目录中运行 Claude Code 时可用）。&lt;/li&gt;
&lt;li&gt;在全局配置中（在所有项目中可用）。&lt;/li&gt;
&lt;li&gt;在检入的 &lt;code&gt;.mcp.json&lt;/code&gt; 文件中（对在您的代码库中工作的任何人可用）。例如，您可以将 Puppeteer 和 Sentry 服务器添加到您的 &lt;code&gt;.mcp.json&lt;/code&gt; 中，这样在您的仓库中工作的每位工程师都可以开箱即用地使用这些工具。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在使用 MCP 时，使用 &lt;code&gt;--mcp-debug&lt;/code&gt; 标志启动 Claude 也有助于识别配置问题。&lt;/p&gt;
&lt;h4 id=&#34;c-使用自定义斜杠命令&#34;&gt;c. 使用自定义斜杠命令
&lt;/h4&gt;&lt;p&gt;对于重复的工作流——调试循环、日志分析等——将提示模板存储在 &lt;code&gt;.claude/commands&lt;/code&gt; 文件夹中的 Markdown 文件中。当您键入 &lt;code&gt;/&lt;/code&gt; 时，这些模板将通过斜杠命令菜单可用。您可以将这些命令检入 git，使其对团队其他成员可用。&lt;/p&gt;
&lt;p&gt;自定义斜杠命令可以包含特殊关键字 &lt;code&gt;$ARGUMENTS&lt;/code&gt; 以从命令调用中传递参数。&lt;/p&gt;
&lt;p&gt;例如，这是一个可用于自动拉取和修复 Github issue 的斜杠命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;请分析并修复 GitHub issue：$ARGUMENTS。请遵循以下步骤：
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;1.&lt;/span&gt; 使用 &lt;span class=&#34;sb&#34;&gt;`gh issue view`&lt;/span&gt; 获取 issue 详细信息。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;2.&lt;/span&gt; 理解 issue 中描述的问题。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;3.&lt;/span&gt; 在代码库中搜索相关文件。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;4.&lt;/span&gt; 实施必要的更改以修复问题。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;5.&lt;/span&gt; 编写并运行测试以验证修复。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;6.&lt;/span&gt; 确保代码通过 linting 和类型检查。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;7.&lt;/span&gt; 创建一个描述性的提交消息。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;8.&lt;/span&gt; 推送并创建一个 PR。
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;请记住使用 GitHub CLI (&lt;span class=&#34;sb&#34;&gt;`gh`&lt;/span&gt;) 来完成所有与 GitHub 相关的任务。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;将上述内容放入 &lt;code&gt;.claude/commands/fix-github-issue.md&lt;/code&gt; 中，使其在 Claude Code 中作为 &lt;code&gt;/project:fix-github-issue&lt;/code&gt; 命令可用。然后，您可以使用例如 &lt;code&gt;/project:fix-github-issue 1234&lt;/code&gt; 来让 Claude 修复 issue #1234。同样，您可以将自己的个人命令添加到 &lt;code&gt;~/.claude/commands&lt;/code&gt; 文件夹中，以便在所有会话中使用。&lt;/p&gt;
&lt;h3 id=&#34;3-尝试常见的工作流&#34;&gt;3. 尝试常见的工作流
&lt;/h3&gt;&lt;p&gt;Claude Code 不会强加特定的工作流，让您可以灵活地按自己的方式使用它。在这种灵活性提供的空间内，我们的用户社区中出现了几种有效使用 Claude Code 的成功模式：&lt;/p&gt;
&lt;h4 id=&#34;a-探索计划编码提交&#34;&gt;a. 探索、计划、编码、提交
&lt;/h4&gt;&lt;p&gt;这个通用的工作流适用于许多问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;要求 Claude 阅读相关文件、图像或 URL&lt;/strong&gt;，可以提供一般性指引（“阅读处理日志记录的文件”）或特定文件名（“阅读 logging.py”），但要明确告诉它暂时不要编写任何代码。
&lt;ul&gt;
&lt;li&gt;在这个工作流的这个部分，您应该考虑强力使用子代理，特别是对于复杂问题。告诉 Claude 使用子代理来验证细节或调查它可能有的特定问题，尤其是在对话或任务的早期，往往可以在不损失太多效率的情况下保留上下文的可用性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求 Claude 制定解决特定问题的方法计划&lt;/strong&gt;。我们建议使用“思考（think）”这个词来触发扩展思考模式，这会给 Claude 额外的计算时间来更彻底地评估替代方案。这些特定的短语直接映射到系统中不断增加的思考预算级别：“think” &amp;lt; “think hard” &amp;lt; “think harder” &amp;lt; “ultrathink”。每个级别都会分配逐渐增多的思考预算供 Claude 使用。
&lt;ul&gt;
&lt;li&gt;如果此步骤的结果看起来合理，您可以让 Claude 创建一个文档或一个 GitHub issue，其中包含其计划，这样如果实现（步骤3）不符合您的要求，您可以重置到这个位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求 Claude 用代码实现其解决方案&lt;/strong&gt;。这也是一个好时机，要求它在实现解决方案的各个部分时明确验证其解决方案的合理性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求 Claude 提交结果并创建一个 pull request&lt;/strong&gt;。如果相关，这也是让 Claude 更新任何 README 或 changelog，并解释它刚刚做了什么的好时机。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;步骤 #1-#2至关重要——没有它们，Claude 往往会直接跳到编码解决方案。虽然有时这正是您想要的，但要求 Claude 先进行研究和规划，可以显著提高解决需要预先深入思考的问题的性能。&lt;/p&gt;
&lt;h4 id=&#34;b-编写测试提交编码迭代提交&#34;&gt;b. 编写测试，提交；编码，迭代，提交
&lt;/h4&gt;&lt;p&gt;这是一个在 Anthropic 内部备受青睐的工作流，适用于可以通过单元、集成或端到端测试轻松验证的更改。测试驱动开发（TDD）在代理式编码中变得更加强大：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;要求 Claude 根据预期的输入/输出对编写测试&lt;/strong&gt;。明确说明您正在进行测试驱动开发，这样它就会避免创建模拟实现，即使对于代码库中尚不存在的功能也是如此。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;告诉 Claude 运行测试并确认它们失败&lt;/strong&gt;。明确告诉它在此阶段不要编写任何实现代码通常很有帮助。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当您对测试满意时，要求 Claude 提交测试&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求 Claude 编写通过测试的代码&lt;/strong&gt;，并指示它不要修改测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;告诉 Claude 继续，直到所有测试都通过&lt;/strong&gt;。Claude 通常需要几次迭代才能编写代码、运行测试、调整代码并再次运行测试。
&lt;ul&gt;
&lt;li&gt;在此阶段，要求它使用独立的子代理来验证实现没有过度拟合测试可能会有所帮助。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一旦您对更改感到满意，就要求 Claude 提交代码&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当 Claude 有一个明确的目标可以迭代时，它的表现最好——无论是视觉模型、测试用例还是其他类型的输出。通过提供像测试这样的预期输出，Claude 可以进行更改、评估结果并逐步改进，直到成功。&lt;/p&gt;
&lt;h4 id=&#34;c-编写代码截图结果迭代&#34;&gt;c. 编写代码，截图结果，迭代
&lt;/h4&gt;&lt;p&gt;与测试工作流类似，您可以为 Claude 提供视觉目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;为 Claude 提供一种截取浏览器屏幕截图的方法&lt;/strong&gt;（例如，使用 Puppeteer MCP 服务器、iOS 模拟器 MCP 服务器，或手动将屏幕截图复制/粘贴到 Claude 中）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过复制/粘贴或拖放图像，或提供图像文件路径，为 Claude 提供一个视觉模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求 Claude 用代码实现设计，截取结果的屏幕截图，并进行迭代，直到其结果与模型匹配&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当您满意时，要求 Claude 提交&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;像人类一样，Claude 的输出通常会随着迭代而显著改善。虽然第一个版本可能不错，但经过2-3次迭代后，它通常会看起来好得多。为 Claude 提供查看其输出的工具以获得最佳结果。&lt;/p&gt;
&lt;h4 id=&#34;d-安全的yolo模式&#34;&gt;d. 安全的“YOLO”模式
&lt;/h4&gt;&lt;p&gt;您可以不监督 Claude，而是使用 &lt;code&gt;claude --dangerously-skip-permissions&lt;/code&gt; 来绕过所有权限检查，让 Claude 不间断地工作直到完成。这对于修复 lint 错误或生成样板代码等工作流非常有效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;：让 Claude 运行任意命令是有风险的，可能导致数据丢失、系统损坏甚至数据泄露（例如，通过提示注入攻击）。为了将这些风险降到最低，请在没有互联网访问的容器中使用 &lt;code&gt;--dangerously-skip-permissions&lt;/code&gt;。您可以参考这个使用 Docker 开发容器的实现。&lt;/p&gt;
&lt;h4 id=&#34;e-代码库问答&#34;&gt;e. 代码库问答
&lt;/h4&gt;&lt;p&gt;在熟悉新的代码库时，使用 Claude Code 进行学习和探索。您可以向 Claude 提出与结对编程时向项目中的其他工程师提出的同类问题。Claude 可以代理式地搜索代码库以回答一般性问题，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日志记录是如何工作的？&lt;/li&gt;
&lt;li&gt;我如何创建一个新的 API 端点？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foo.rs&lt;/code&gt; 第134行的 &lt;code&gt;async move { ... }&lt;/code&gt; 是做什么的？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CustomerOnboardingFlowImpl&lt;/code&gt; 处理了哪些边缘情况？&lt;/li&gt;
&lt;li&gt;为什么我们在第333行调用 &lt;code&gt;foo()&lt;/code&gt; 而不是 &lt;code&gt;bar()&lt;/code&gt;？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;baz.py&lt;/code&gt; 第334行在 Java 中的等价物是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Anthropic，以这种方式使用 Claude Code 已成为我们的核心入职工作流，显著缩短了上手时间并减轻了其他工程师的负担。无需特殊提示！只需提问，Claude 就会探索代码以找到答案。&lt;/p&gt;
&lt;h4 id=&#34;f-使用-claude-与-git-交互&#34;&gt;f. 使用 Claude 与 git 交互
&lt;/h4&gt;&lt;p&gt;Claude 可以有效地处理许多 git 操作。许多 Anthropic 工程师使用 Claude 进行 90% 以上的 git 交互：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;搜索 git 历史记录&lt;/strong&gt;以回答诸如“v1.2.3 版本中包含了哪些更改？”、“谁拥有这个特定功能？”或“为什么这个 API 是这样设计的？”之类的问题。明确提示 Claude 查看 git 历史记录以回答此类查询很有帮助。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编写提交消息&lt;/strong&gt;。Claude 会自动查看您的更改和最近的历史记录，以撰写包含所有相关上下文的消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理复杂的 git 操作&lt;/strong&gt;，如还原文件、解决 rebase 冲突以及比较和嫁接补丁。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;g-使用-claude-与-github-交互&#34;&gt;g. 使用 Claude 与 GitHub 交互
&lt;/h4&gt;&lt;p&gt;Claude Code 可以管理许多 GitHub 交互：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建 pull request&lt;/strong&gt;：Claude 理解速记“pr”，并将根据差异和周围的上下文生成适当的提交消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对简单的代码审查评论实施一次性解决方案&lt;/strong&gt;：只需告诉它修复您 PR 上的评论（可选地，给它更具体的说明），并在完成后推送回 PR 分支。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;修复失败的构建或 linter 警告&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通过要求 Claude 遍历开放的 GitHub issue 来分类和分流&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这消除了记住 &lt;code&gt;gh&lt;/code&gt; 命令行语法的需要，同时自动化了常规任务。&lt;/p&gt;
&lt;h4 id=&#34;h-使用-claude-处理-jupyter-notebook&#34;&gt;h. 使用 Claude 处理 Jupyter notebook
&lt;/h4&gt;&lt;p&gt;Anthropic 的研究人员和数据科学家使用 Claude Code 来读写 Jupyter notebook。Claude 可以解释包括图像在内的输出，为探索和与数据交互提供了一种快速的方法。没有必需的提示或工作流，但我们推荐的一个工作流是在 VS Code 中并排打开 Claude Code 和一个 &lt;code&gt;.ipynb&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;您还可以要求 Claude 在向同事展示之前清理或美化您的 Jupyter notebook。明确告诉它使 notebook 或其数据可视化“美观”往往有助于提醒它正在为人类的观看体验进行优化。&lt;/p&gt;
&lt;h3 id=&#34;4-优化您的工作流&#34;&gt;4. 优化您的工作流
&lt;/h3&gt;&lt;p&gt;以下建议适用于所有工作流：&lt;/p&gt;
&lt;h4 id=&#34;a-在您的指令中要具体&#34;&gt;a. 在您的指令中要具体
&lt;/h4&gt;&lt;p&gt;Claude Code 的成功率随着更具体的指令而显著提高，尤其是在初次尝试时。预先给出明确的指示可以减少以后进行路线修正的需要。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;差的指令&lt;/th&gt;
          &lt;th&gt;好的指令&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;为 foo.py 添加测试&lt;/td&gt;
          &lt;td&gt;为 foo.py 编写一个新的测试用例，涵盖用户未登录的边缘情况。避免使用 mock。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;为什么 ExecutionFactory 的 api 这么奇怪？&lt;/td&gt;
          &lt;td&gt;查看 ExecutionFactory 的 git 历史记录，并总结其 api 是如何形成的。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;添加一个日历小部件&lt;/td&gt;
          &lt;td&gt;查看主页上现有小部件的实现方式，以了解模式，特别是代码和接口是如何分离的。HotDogWidget.php 是一个很好的起点。然后，遵循该模式实现一个新的日历小部件，让用户可以选择月份并向前/向后翻页以选择年份。除了代码库中已使用的库之外，不要使用其他库从头构建。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Claude 可以推断意图，但它无法读懂您的心思。具体性可以更好地与期望保持一致。&lt;/p&gt;
&lt;h4 id=&#34;b-给-claude-图像&#34;&gt;b. 给 Claude 图像
&lt;/h4&gt;&lt;p&gt;Claude 通过多种方法在处理图像和图表方面表现出色：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;粘贴屏幕截图（专业提示：在 macOS 中按 &lt;code&gt;cmd+ctrl+shift+4&lt;/code&gt; 将屏幕截图到剪贴板，然后按 &lt;code&gt;ctrl+v&lt;/code&gt; 粘贴。请注意，这与您通常在 Mac 上用于粘贴的 &lt;code&gt;cmd+v&lt;/code&gt; 不同，并且在远程操作时无效。）&lt;/li&gt;
&lt;li&gt;将图像直接拖放到提示输入中。&lt;/li&gt;
&lt;li&gt;提供图像的文件路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这在处理用于 UI 开发的设计模型以及用于分析和调试的可视化图表时特别有用。如果您没有向上下文中添加视觉效果，向 Claude 明确说明结果在视觉上具有吸引力的重要性仍然很有帮助。&lt;/p&gt;
&lt;h4 id=&#34;c-提及您希望-claude-查看或处理的文件&#34;&gt;c. 提及您希望 Claude 查看或处理的文件
&lt;/h4&gt;&lt;p&gt;使用 Tab 键补全可以快速引用仓库中任何位置的文件或文件夹，帮助 Claude 找到或更新正确的资源。&lt;/p&gt;
&lt;h4 id=&#34;d-给-claude-url&#34;&gt;d. 给 Claude URL
&lt;/h4&gt;&lt;p&gt;将特定的 URL 与您的提示一起粘贴，供 Claude 获取和阅读。为避免对相同域（例如，docs.foo.com）的权限提示，请使用 &lt;code&gt;/permissions&lt;/code&gt; 将域添加到您的允许列表中。&lt;/p&gt;
&lt;h4 id=&#34;e-及早并经常纠正路线&#34;&gt;e. 及早并经常纠正路线
&lt;/h4&gt;&lt;p&gt;虽然自动接受模式（按 &lt;code&gt;shift+tab&lt;/code&gt; 切换）让 Claude 可以自主工作，但通过作为积极的协作者并指导 Claude 的方法，您通常会获得更好的结果。您可以在开始时向 Claude 彻底解释任务以获得最佳结果，但您也可以随时纠正 Claude 的路线。&lt;/p&gt;
&lt;p&gt;这四个工具有助于路线修正：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;在编码前要求 Claude 制定计划&lt;/strong&gt;。明确告诉它在您确认其计划看起来不错之前不要编码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在任何阶段（思考、工具调用、文件编辑）按 Escape 键中断 Claude&lt;/strong&gt;，保留上下文，以便您可以重定向或扩展指令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双击 Escape 键跳回历史记录&lt;/strong&gt;，编辑先前的提示，并探索不同的方向。您可以编辑提示并重复，直到获得所需的结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;要求 Claude 撤销更改&lt;/strong&gt;，通常与选项 #2 结合使用以采取不同的方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尽管 Claude Code 偶尔会在第一次尝试时完美解决问题，但使用这些修正工具通常可以更快地产生更好的解决方案。&lt;/p&gt;
&lt;h4 id=&#34;f-使用-clear-保持上下文专注&#34;&gt;f. 使用 &lt;code&gt;/clear&lt;/code&gt; 保持上下文专注
&lt;/h4&gt;&lt;p&gt;在长时间的会话中，Claude 的上下文窗口可能会充满不相关的对话、文件内容和命令。这会降低性能，有时还会分散 Claude 的注意力。在任务之间频繁使用 &lt;code&gt;/clear&lt;/code&gt; 命令来重置上下文窗口。&lt;/p&gt;
&lt;h4 id=&#34;g-对复杂工作流使用清单和草稿板&#34;&gt;g. 对复杂工作流使用清单和草稿板
&lt;/h4&gt;&lt;p&gt;对于具有多个步骤或需要详尽解决方案的大型任务——如代码迁移、修复大量 lint 错误或运行复杂的构建脚本——通过让 Claude 使用 Markdown 文件（甚至 GitHub issue！）作为清单和工作草稿板来提高性能：&lt;/p&gt;
&lt;p&gt;例如，要修复大量的 lint 问题，您可以执行以下操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;告诉 Claude 运行 lint 命令，并将所有结果错误（包括文件名和行号）写入 Markdown 清单。&lt;/li&gt;
&lt;li&gt;指示 Claude 逐个解决每个问题，在勾选并移至下一个问题之前进行修复和验证。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;h-将数据传递给-claude&#34;&gt;h. 将数据传递给 Claude
&lt;/h4&gt;&lt;p&gt;有几种方法可以向 Claude 提供数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接复制并粘贴到您的提示中（最常见的方法）。&lt;/li&gt;
&lt;li&gt;通过管道传递给 Claude Code（例如，&lt;code&gt;cat foo.txt | claude&lt;/code&gt;），对于日志、CSV 和大数据特别有用。&lt;/li&gt;
&lt;li&gt;告诉 Claude 通过 bash 命令、MCP 工具或自定义斜杠命令拉取数据。&lt;/li&gt;
&lt;li&gt;要求 Claude 读取文件或获取 URL（也适用于图像）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数会话都涉及这些方法的组合。例如，您可以传入一个日志文件，然后告诉 Claude 使用一个工具来引入额外的上下文来调试日志。&lt;/p&gt;
&lt;h3 id=&#34;5-使用无头模式自动化您的基础架构&#34;&gt;5. 使用无头模式自动化您的基础架构
&lt;/h3&gt;&lt;p&gt;Claude Code 包含无头模式，适用于非交互式环境，如 CI、预提交钩子、构建脚本和自动化。使用 &lt;code&gt;-p&lt;/code&gt; 标志和提示来启用无头模式，并使用 &lt;code&gt;--output-format stream-json&lt;/code&gt; 进行流式 JSON 输出。&lt;/p&gt;
&lt;p&gt;请注意，无头模式在会话之间不持久。您必须在每个会话中触发它。&lt;/p&gt;
&lt;h4 id=&#34;a-使用-claude-进行-issue-分流&#34;&gt;a. 使用 Claude 进行 issue 分流
&lt;/h4&gt;&lt;p&gt;无头模式可以为由 GitHub 事件触发的自动化提供支持，例如当您的仓库中创建新 issue 时。例如，公共的 Claude Code 仓库使用 Claude 来检查新进的 issue 并分配适当的标签。&lt;/p&gt;
&lt;h4 id=&#34;b-使用-claude-作为-linter&#34;&gt;b. 使用 Claude 作为 linter
&lt;/h4&gt;&lt;p&gt;Claude Code 可以提供传统 linting 工具无法检测到的主观代码审查，识别诸如拼写错误、过时的注释、误导性的函数或变量名等问题。&lt;/p&gt;
&lt;h3 id=&#34;6-通过多-claude-工作流提升水平&#34;&gt;6. 通过多 Claude 工作流提升水平
&lt;/h3&gt;&lt;p&gt;除了独立使用之外，一些最强大的应用涉及并行运行多个 Claude 实例：&lt;/p&gt;
&lt;h4 id=&#34;a-让一个-claude-编写代码使用另一个-claude-进行验证&#34;&gt;a. 让一个 Claude 编写代码；使用另一个 Claude 进行验证
&lt;/h4&gt;&lt;p&gt;一个简单但有效的方法是让一个 Claude 编写代码，而另一个则进行审查或测试。与多位工程师合作类似，有时拥有独立的上下文是有益的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 Claude 编写代码。&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;/clear&lt;/code&gt; 或在另一个终端中启动第二个 Claude。&lt;/li&gt;
&lt;li&gt;让第二个 Claude 审查第一个 Claude 的工作。&lt;/li&gt;
&lt;li&gt;启动另一个 Claude（或再次 &lt;code&gt;/clear&lt;/code&gt;）来阅读代码和审查反馈。&lt;/li&gt;
&lt;li&gt;让这个 Claude 根据反馈编辑代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;您可以用测试做类似的事情：让一个 Claude 编写测试，然后让另一个 Claude 编写代码以使测试通过。您甚至可以让您的 Claude 实例通过给它们独立的草稿板并告诉它们哪个写入哪个读取来相互通信。&lt;/p&gt;
&lt;p&gt;这种分离通常比让单个 Claude 处理所有事情产生更好的结果。&lt;/p&gt;
&lt;h4 id=&#34;b-拥有多个代码库的检出副本&#34;&gt;b. 拥有多个代码库的检出副本
&lt;/h4&gt;&lt;p&gt;许多 Anthropic 的工程师不是等待 Claude 完成每一步，而是这样做：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在不同的文件夹中创建 3-4 个 git 检出副本。&lt;/li&gt;
&lt;li&gt;在不同的终端选项卡中打开每个文件夹。&lt;/li&gt;
&lt;li&gt;在每个文件夹中以不同的任务启动 Claude。&lt;/li&gt;
&lt;li&gt;循环检查进度并批准/拒绝权限请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;c-使用-git-worktrees&#34;&gt;c. 使用 git worktrees
&lt;/h4&gt;&lt;p&gt;这种方法在处理多个独立任务时表现出色，为多个检出副本提供了一种更轻量级的替代方案。Git worktrees 允许您将同一仓库的多个分支检出到不同的目录中。每个 worktree 都有自己的工作目录和隔离的文件，同时共享相同的 Git 历史和 reflog。&lt;/p&gt;
&lt;p&gt;使用 git worktrees 使您能够同时在项目的不同部分运行多个 Claude 会话，每个会话都专注于其独立的任务。例如，您可能让一个 Claude 重构您的身份验证系统，而另一个则构建一个完全不相关的数据可视化组件。由于任务不重叠，每个 Claude 都可以全速工作，而无需等待对方的更改或处理合并冲突：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 worktrees: &lt;code&gt;git worktree add ../project-feature-a feature-a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在每个 worktree 中启动 Claude: &lt;code&gt;cd ../project-feature-a &amp;amp;&amp;amp; claude&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;根据需要创建额外的 worktrees（在新的终端选项卡中重复步骤1-2）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一些提示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用一致的命名约定。&lt;/li&gt;
&lt;li&gt;每个 worktree 维护一个终端选项卡。&lt;/li&gt;
&lt;li&gt;如果您在 Mac 上使用 iTerm2，请设置当 Claude 需要注意时的通知。&lt;/li&gt;
&lt;li&gt;为不同的 worktrees 使用不同的 IDE 窗口。&lt;/li&gt;
&lt;li&gt;完成后清理：&lt;code&gt;git worktree remove ../project-feature-a&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;d-使用无头模式和自定义工具链&#34;&gt;d. 使用无头模式和自定义工具链
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;claude -p&lt;/code&gt;（无头模式）以编程方式将 Claude Code 集成到更大的工作流中，同时利用其内置工具和系统提示。使用无头模式主要有两种模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;扇出（Fanning out）&lt;/strong&gt; 处理大规模迁移或分析（例如，分析数百个日志中的情绪或分析数千个 CSV）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让 Claude 编写一个脚本来生成任务列表。例如，生成一个需要从框架 A 迁移到框架 B 的 2000 个文件的列表。&lt;/li&gt;
&lt;li&gt;循环遍历任务，为每个任务以编程方式调用 Claude，并给它一个任务和一组它可以使用的工具。例如：&lt;code&gt;claude -p “将 foo.py 从 React 迁移到 Vue。完成后，如果成功，您必须返回字符串 OK，如果任务失败，则返回 FAIL。” --allowedTools Edit Bash(git commit:*)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多次运行脚本并优化您的提示以获得期望的结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;管道化（Pipelining）&lt;/strong&gt; 将 Claude 集成到现有的数据/处理管道中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用 &lt;code&gt;claude -p “&amp;lt;您的提示&amp;gt;” --json | your_command&lt;/code&gt;，其中 &lt;code&gt;your_command&lt;/code&gt; 是您处理管道的下一步。&lt;/li&gt;
&lt;li&gt;就是这样！JSON 输出（可选）可以帮助提供结构，以便于自动化处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于这两种用例，使用 &lt;code&gt;--verbose&lt;/code&gt; 标志进行调试 Claude 调用可能会有所帮助。我们通常建议在生产中关闭详细模式以获得更清晰的输出。&lt;/p&gt;
&lt;p&gt;您在使用 Claude Code 方面有什么技巧和最佳实践？请标记 @AnthropicAI，让我们看看您正在构建什么！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;致谢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由 Boris Cherny 撰写。这项工作借鉴了更广泛的 Claude Code 用户社区的最佳实践，他们富有创意的方法和工作流继续激励着我们。特别感谢 Daisy Hollman、Ashwin Bhat、Cat Wu、Sid Bidasaria、Cal Rueb、Nodir Turakulov、Barry Zhang、Drew Hodun 以及许多其他 Anthropic 工程师，他们对 Claude Code 的宝贵见解和实践经验帮助塑造了这些建议。&lt;/p&gt;
&lt;h2 id=&#34;原文&#34;&gt;原文
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.anthropic.com/engineering/claude-code-best-practices&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.anthropic.com/engineering/claude-code-best-practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Gemini 这一 Bug 即将修复！Claude Sonnet 迎来 1M 上下文！【AI 早报 2025-08-13】</title>
        <link>https://ai.programnotes.cn/p/gemini-%E8%BF%99%E4%B8%80-bug-%E5%8D%B3%E5%B0%86%E4%BF%AE%E5%A4%8Dclaude-sonnet-%E8%BF%8E%E6%9D%A5-1m-%E4%B8%8A%E4%B8%8B%E6%96%87ai-%E6%97%A9%E6%8A%A5-2025-08-13/</link>
        <pubDate>Wed, 13 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/gemini-%E8%BF%99%E4%B8%80-bug-%E5%8D%B3%E5%B0%86%E4%BF%AE%E5%A4%8Dclaude-sonnet-%E8%BF%8E%E6%9D%A5-1m-%E4%B8%8A%E4%B8%8B%E6%96%87ai-%E6%97%A9%E6%8A%A5-2025-08-13/</guid>
        <description>&lt;p&gt;Intro: 00:00&lt;/p&gt;
&lt;p&gt;⬛️ Anthropic发布Claude Sonnet 4百万token上下文窗口: 00:10&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://www.anthropic.com/news/1m-context&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.anthropic.com/news/1m-context&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://docs.anthropic.com/en/docs/build-with-claude/context-windows#1m-token-context-window&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.anthropic.com/en/docs/build-with-claude/context-windows#1m-token-context-window&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://www.anthropic.com/pricing#api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.anthropic.com/pricing#api&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ OpenAI&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1N9bczTENE&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Qwen Code 现在提供每日2000次免费调用；Claude Code新增后台任务处理能力【AI 早报 2025-08-09】</title>
        <link>https://ai.programnotes.cn/p/qwen-code-%E7%8E%B0%E5%9C%A8%E6%8F%90%E4%BE%9B%E6%AF%8F%E6%97%A52000%E6%AC%A1%E5%85%8D%E8%B4%B9%E8%B0%83%E7%94%A8claude-code%E6%96%B0%E5%A2%9E%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9Bai-%E6%97%A9%E6%8A%A5-2025-08-09/</link>
        <pubDate>Sat, 09 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/qwen-code-%E7%8E%B0%E5%9C%A8%E6%8F%90%E4%BE%9B%E6%AF%8F%E6%97%A52000%E6%AC%A1%E5%85%8D%E8%B4%B9%E8%B0%83%E7%94%A8claude-code%E6%96%B0%E5%A2%9E%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9Bai-%E6%97%A9%E6%8A%A5-2025-08-09/</guid>
        <description>&lt;p&gt;Intro: 00:00&lt;/p&gt;
&lt;p&gt;⬛️ Sam Altman 回应 GPT-5 相关问题: 00:09&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://x.com/sama/status/1953893841381273969&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://x.com/sama/status/1953893841381273969&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ Qwen 开源模型再升级 支持100万token超长上下文: 00:33&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://x.com/Alibaba_Qwen/status/1953760230141309354&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://x.com/Alibaba_Qwen/status/1953760230141309354&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;🔗 &lt;a class=&#34;link&#34; href=&#34;https://huggingface.co/Qwen/Qwen3-235B-A22B-Instruct-250&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://huggingface.co/Qwen/Qwen3-235B-A22B-Instruct-250&lt;/a&gt;&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1QLtxzLEbN&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Anthropic 发布 Claude Code 安全审查功能：支持 SQL/XSS 漏洞检测</title>
        <link>https://ai.programnotes.cn/p/anthropic-%E5%8F%91%E5%B8%83-claude-code-%E5%AE%89%E5%85%A8%E5%AE%A1%E6%9F%A5%E5%8A%9F%E8%83%BD%E6%94%AF%E6%8C%81-sql/xss-%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</link>
        <pubDate>Thu, 07 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/anthropic-%E5%8F%91%E5%B8%83-claude-code-%E5%AE%89%E5%85%A8%E5%AE%A1%E6%9F%A5%E5%8A%9F%E8%83%BD%E6%94%AF%E6%8C%81-sql/xss-%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/anthropics/claude-code-security-review&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/anthropics/claude-code-security-review&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/anthropics/claude-code-security-review&#34;  title=&#34;Claude Code 安全审查功能 GitHub 页面&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Anthropic 最新发布的 Claude Code&lt;/a&gt; 现已支持安全审查功能。通过 /security-review 命令，开发者可以进行临时安全审查。此外，还提供了 GitHub Actions 集成，可自动&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV12ytizKE7M&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Mistral发布开源语音模型Voxtral；秘塔AI搜索上线“深度研究”【AI早报 2025-07-16】</title>
        <link>https://ai.programnotes.cn/p/mistral%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9E%8Bvoxtral%E7%A7%98%E5%A1%94ai%E6%90%9C%E7%B4%A2%E4%B8%8A%E7%BA%BF%E6%B7%B1%E5%BA%A6%E7%A0%94%E7%A9%B6ai%E6%97%A9%E6%8A%A5-2025-07-16/</link>
        <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/mistral%E5%8F%91%E5%B8%83%E5%BC%80%E6%BA%90%E8%AF%AD%E9%9F%B3%E6%A8%A1%E5%9E%8Bvoxtral%E7%A7%98%E5%A1%94ai%E6%90%9C%E7%B4%A2%E4%B8%8A%E7%BA%BF%E6%B7%B1%E5%BA%A6%E7%A0%94%E7%A9%B6ai%E6%97%A9%E6%8A%A5-2025-07-16/</guid>
        <description>&lt;p&gt;⬛️ Intro: 00:00&lt;/p&gt;
&lt;p&gt;⬛️ Mistral发布开源语音模型Voxtral，直接对标Whisper: 00:10&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mistral.ai/news/voxtral&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mistral.ai/news/voxtral&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ 秘塔AI搜索上线“深度研究”功能: 00:27&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/-w48s1XuIEcWg6Rd3ZGRXg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mp.weixin.qq.com/s/-w48s1XuIEcWg6Rd3ZGRXg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ Anthropic或将在Claude应用中提供免费限额的Opus、思考模式和项目: 00:37&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://x.com/btibor91/statu&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://x.com/btibor91/statu&lt;/a&gt;&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1pzuWzjEGz&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>OpenAI 推迟发布开放权重模型；Claude Code 更新支持 Windows【AI早报 2025-07-13】</title>
        <link>https://ai.programnotes.cn/p/openai-%E6%8E%A8%E8%BF%9F%E5%8F%91%E5%B8%83%E5%BC%80%E6%94%BE%E6%9D%83%E9%87%8D%E6%A8%A1%E5%9E%8Bclaude-code-%E6%9B%B4%E6%96%B0%E6%94%AF%E6%8C%81-windowsai%E6%97%A9%E6%8A%A5-2025-07-13/</link>
        <pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/openai-%E6%8E%A8%E8%BF%9F%E5%8F%91%E5%B8%83%E5%BC%80%E6%94%BE%E6%9D%83%E9%87%8D%E6%A8%A1%E5%9E%8Bclaude-code-%E6%9B%B4%E6%96%B0%E6%94%AF%E6%8C%81-windowsai%E6%97%A9%E6%8A%A5-2025-07-13/</guid>
        <description>&lt;p&gt;⬛️ Intro: 00:00&lt;/p&gt;
&lt;p&gt;⬛️ OpenAI 推迟发布开放权重模型: 00:10&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/sama/status/1943837550369812814&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://twitter.com/sama/status/1943837550369812814&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⬛️ Google 斥资约24亿美元获AI编码工具Windsurf授权: 00:25&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.bloomberg.com/news/articles/2025-07-11/openai-s-3-billion-deal-to-buy-ai-startup-windsurf-falls-apar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bloomberg.com/news/articles/2025-07-11/openai-s-3-billion-deal-to-buy-ai-startup-windsurf-falls-apar&lt;/a&gt;&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV17fMdzfE3G&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Anthropic 发布 Claude Artifacts Space：一键共享 AI 应用</title>
        <link>https://ai.programnotes.cn/p/anthropic-%E5%8F%91%E5%B8%83-claude-artifacts-space%E4%B8%80%E9%94%AE%E5%85%B1%E4%BA%AB-ai-%E5%BA%94%E7%94%A8/</link>
        <pubDate>Fri, 27 Jun 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/anthropic-%E5%8F%91%E5%B8%83-claude-artifacts-space%E4%B8%80%E9%94%AE%E5%85%B1%E4%BA%AB-ai-%E5%BA%94%E7%94%A8/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://x.com/AnthropicAI/status/1937921801000219041&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://x.com/AnthropicAI/status/1937921801000219041&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://x.com/AnthropicAI/status/1937921801000219041&#34;  title=&#34;Claude Artifacts Space 官方介绍&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Anthropic 最新推出的 Claude Artifacts Space&lt;/a&gt; 功能，允许用户将创建的 Artifact 应用发布后供任何人使用。这个创新功能为 AI 应用共享提供了全新解决方案。&lt;/p&gt;






    


&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe src=&#34;https://player.bilibili.com/player.html?as_wide=1&amp;amp;high_quality=1&amp;amp;page=1&amp;bvid=BV1gmTczRENW&#34;
            scrolling=&#34;no&#34;
            frameborder=&#34;no&#34;
            framespacing=&#34;0&#34;
            allowfullscreen=&#34;true&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>MCP 终极指南</title>
        <link>https://ai.programnotes.cn/p/mcp-%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</link>
        <pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/mcp-%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;p&gt;核心内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCP 是一个由 Claude 主导发布的开放、通用、有共识的协议标准，旨在解决 AI 模型与现有系统集成缓慢的问题。&lt;/li&gt;
&lt;li&gt;MCP 通过定义标准化的协议，使 AI 模型能够与不同的 API 和数据源无缝交互，替换碎片化的 Agent 代码集成，从而使 AI 系统更可靠、更有效。&lt;/li&gt;
&lt;li&gt;MCP Server 是实现 AI Agent 自动化的关键，它作为一个中间层，告知 AI Agent 存在哪些服务、API 和数据源，从而使 AI Agent 能够自主决定是否调用某个服务来完成任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;源自&lt;/strong&gt; | guangzhengli AI独立开发&lt;/p&gt;
&lt;p&gt;过去快一年的时间没有更新 AI 相关的博客，一方面是在忙 side project，另外一方面也是因为 AI 技术虽然日新月异，但是 AI 应用层的开发并没有多少新的东西，大体还是&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/gpt-embeddings/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;2023年的博客&lt;/a&gt;讲的那三样，Prompt、RAG、Agent。&lt;/p&gt;
&lt;p&gt;但是自从去年 11 月底 Claude(Anthropic) 主导发布了 MCP(Model Context Protocol 模型上下文协议) 后，AI 应用层的开发算是进入了新的时代。&lt;/p&gt;
&lt;p&gt;不过关于 MCP 的解释和开发，目前似乎还没有太多的资料，所以笔者决定将自己的一些经验和思考整理成一篇文章，希望能够帮助到大家。&lt;/p&gt;
&lt;h2 id=&#34;为什么-mcp-是一个突破&#34;&gt;为什么 MCP 是一个突破
&lt;/h2&gt;&lt;p&gt;我们知道过去一年时间，AI 模型的发展非常迅速，从 GPT 4 到 Claude Sonnet 3.5 到 Deepseek R1，推理和幻觉都进步的非常明显。&lt;/p&gt;
&lt;p&gt;新的 AI 应用也很多，但我们都能感受到的一点是，目前市场上的 AI 应用基本都是全新的服务，和我们原来常用的服务和系统并没有集成，换句话说，AI 模型和我们已有系统集成发展的很缓慢。&lt;/p&gt;
&lt;p&gt;例如我们目前还不能&lt;strong&gt;同时&lt;/strong&gt;通过某个 AI 应用来做到联网搜索、发送邮件、发布自己的博客等等，这些功能单个实现都不是很难，但是如果要全部集成到一个系统里面，就会变得遥不可及。&lt;/p&gt;
&lt;p&gt;如果你还没有具体的感受，我们可以思考一下日常开发中，想象一下在 IDE 中，我们可以通过 IDE 的 AI 来完成下面这些工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;询问 AI 来查询本地数据库已有的数据来辅助开发&lt;/li&gt;
&lt;li&gt;询问 AI 搜索 Github Issue 来判断某问题是不是已知的bug&lt;/li&gt;
&lt;li&gt;通过 AI 将某个 PR 的意见发送给同事的即时通讯软件(例如 Slack)来 Code Review&lt;/li&gt;
&lt;li&gt;通过 AI 查询甚至修改当前 AWS、Azure 的配置来完成部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上谈到的这些功能通过 MCP 目前正在变为现实，大家可以关注 &lt;a class=&#34;link&#34; href=&#34;https://docs.cursor.com/context/model-context-protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cursor MCP&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=Y_kaQmhGmZk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windsurf MCP&lt;/a&gt; 获取更多的信息。可以试试用 Cursor MCP + &lt;a class=&#34;link&#34; href=&#34;https://browsertools.agentdesk.ai/installation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;browsertools&lt;/a&gt; 插件来体验一下在 Cursor 中自动获取 Chrome dev tools console log 的能力。&lt;/p&gt;
&lt;p&gt;为什么 AI 集成已有服务的进展这么缓慢？这里面有很多的原因，一方面是企业级的数据很敏感，大多数企业都要很长的时间和流程来动。另一个方面是技术方面，我们缺少一个开放的、通用的、有共识的协议标准。&lt;/p&gt;
&lt;p&gt;MCP 就是 Claude(Anthropic) 主导发布的一个开放的、通用的、有共识的协议标准，如果你是一个对 AI 模型熟悉的开发人员，想必对 Anthropic 这个公司不会陌生，他们发布了 Claude 3.5 Sonnet 的模型，到目前为止应该还是最强的编程 AI 模型(刚写完就发布了 3.7😅)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里还是要多提一句，这个协议的发布最好机会应该是属于 OpenAI 的，如果 OpenAI 刚发布 GPT 时就推动协议，相信大家都不会拒绝，但是 OpenAI 变成了 CloseAI，只发布了一个封闭的 GPTs，这种需要主导和共识的标准协议一般很难社区自发形成，一般由行业巨头来主导。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Claude 发布了 MCP 后，官方的 Claude Desktop 就开放了 MCP 功能，并且推动了开源组织 &lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Model Context Protocol&lt;/a&gt;，由不同的公司和社区进行参与，例如下面就列举了一些由不同组织发布 MCP 服务器的例子。&lt;/p&gt;
&lt;h3 id=&#34;mcp-官方集成教学&#34;&gt;MCP 官方集成教学：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers/blob/main/src/git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git&lt;/a&gt;&lt;/strong&gt; - Git 读取、操作、搜索。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers/blob/main/src/github&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;&lt;/strong&gt; - Repo 管理、文件操作和 GitHub API 集成。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers/blob/main/src/google-maps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Maps&lt;/a&gt;&lt;/strong&gt; - 集成 Google Map 获取位置信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers/blob/main/src/postgres&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PostgreSQL&lt;/a&gt;&lt;/strong&gt; - 只读数据库查询。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers/blob/main/src/slack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Slack&lt;/a&gt;&lt;/strong&gt; - Slack 消息发送和查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-第三方平台官方支持-mcp-的例子&#34;&gt;🎖️ 第三方平台官方支持 MCP 的例子
&lt;/h3&gt;&lt;p&gt;由第三方平台构建的 MCP 服务器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grafana/mcp-grafana&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Grafana&lt;/a&gt;&lt;/strong&gt; - 在 Grafana 中搜索查询数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/JetBrains/mcp-jetbrains&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JetBrains&lt;/a&gt;&lt;/strong&gt; – JetBrains IDEs。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/stripe/agent-toolkit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stripe&lt;/a&gt;&lt;/strong&gt; - 与Stripe API交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-社区-mcp-服务器&#34;&gt;🌎 社区 MCP 服务器
&lt;/h3&gt;&lt;p&gt;下面是一些由开源社区开发和维护的 MCP 服务器。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/rishikavikondala/mcp-server-aws&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AWS&lt;/a&gt;&lt;/strong&gt; - 用 LLM 操作 AWS 资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sooperset/mcp-atlassian&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Atlassian&lt;/a&gt;&lt;/strong&gt; - 与 Confluence 和 Jira 进行交互，包括搜索/查询 Confluence 空间/页面，访问 Jira Issue 和项目。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/v-3/google-calendar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Calendar&lt;/a&gt;&lt;/strong&gt; - 与 Google 日历集成，日程安排，查找时间，并添加/删除事件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Flux159/mcp-server-kubernetes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kubernetes&lt;/a&gt;&lt;/strong&gt; - 连接到 Kubernetes 集群并管理 pods、deployments 和 services。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/EnesCinr/twitter-mcp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;X (Twitter)&lt;/a&gt;&lt;/strong&gt; - 与 Twitter API 交互。发布推文并通过查询搜索推文。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ZubeidHendricks/youtube-mcp-server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YouTube&lt;/a&gt;&lt;/strong&gt; - 与 YouTube API 集成，视频管理、短视频创作等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么是-mcp&#34;&gt;为什么是 MCP？
&lt;/h2&gt;&lt;p&gt;看到这里你可能有一个问题，在 23 年 OpenAI 发布 GPT function calling 的时候，不是也是可以实现类似的功能吗？我们之前博客介绍的 AI Agent，不就是用来集成不同的服务吗？为什么又出现了 MCP。&lt;/p&gt;
&lt;p&gt;function calling、AI Agent、MCP 这三者之间有什么区别？&lt;/p&gt;
&lt;h3 id=&#34;function-calling&#34;&gt;Function Calling
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Function Calling 指的是 AI 模型根据上下文自动执行函数的机制。&lt;/li&gt;
&lt;li&gt;Function Calling 充当了 AI 模型与外部系统之间的桥梁，不同的模型有不同的 Function Calling 实现，代码集成的方式也不一样。由不同的 AI 模型平台来定义和实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果我们使用 Function Calling，那么需要通过代码给 LLM 提供一组 functions，并且提供清晰的函数描述、函数输入和输出，那么 LLM 就可以根据清晰的结构化数据进行推理，执行函数。&lt;/p&gt;
&lt;p&gt;Function Calling 的缺点在于处理不好多轮对话和复杂需求，适合边界清晰、描述明确的任务。如果需要处理很多的任务，那么 Function Calling 的代码比较难维护。&lt;/p&gt;
&lt;h3 id=&#34;model-context-protocol-mcp&#34;&gt;Model Context Protocol (MCP)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MCP 是一个标准协议，如同电子设备的 Type C 协议(可以充电也可以传输数据)，使 AI 模型能够与不同的 API 和数据源无缝交互。&lt;/li&gt;
&lt;li&gt;MCP 旨在替换碎片化的 Agent 代码集成，从而使 AI 系统更可靠，更有效。通过建立通用标准，服务商可以基于协议来推出它们自己服务的 AI 能力，从而支持开发者更快的构建更强大的 AI 应用。开发者也不需要重复造轮子，通过开源项目可以建立强大的 AI Agent 生态。&lt;/li&gt;
&lt;li&gt;MCP 可以在不同的应用/服务之间保持上下文，从而增强整体自主执行任务的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以理解为 MCP 是将不同任务进行分层处理，每一层都提供特定的能力、描述和限制。而 MCP Client 端根据不同的任务判断，选择是否需要调用某个能力，然后通过每层的输入和输出，构建一个可以处理复杂、多步对话和统一上下文的 Agent。&lt;/p&gt;
&lt;h3 id=&#34;ai-agent&#34;&gt;AI Agent
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AI Agent 是一个智能系统，它可以自主运行以实现特定目标。传统的 AI 聊天仅提供建议或者需要手动执行任务，AI Agent 则可以分析具体情况，做出决策，并自行采取行动。&lt;/li&gt;
&lt;li&gt;AI Agent 可以利用 MCP 提供的功能描述来理解更多的上下文，并在各种平台/服务自动执行任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;思考&#34;&gt;思考
&lt;/h3&gt;&lt;p&gt;为什么 Claude 推出 MCP 后会被广泛接受呢？其实在过去的一年中我个人也参与了几个小的 AI 项目的开发工作，在开发的过程中，将 AI 模型集成现有的系统或者第三方系统确实挺麻烦。&lt;/p&gt;
&lt;p&gt;虽然市面上有一些框架支持 Agent 开发，例如 &lt;a class=&#34;link&#34; href=&#34;https://www.langchain.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LangChain Tools&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://docs.llamaindex.ai/en/stable/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LlamaIndex&lt;/a&gt; 或者是 &lt;a class=&#34;link&#34; href=&#34;https://sdk.vercel.ai/docs/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Vercel AI SDK&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;LangChain 和 LlamaIndex 虽然都是开源项目，但是整体发展还是挺混乱的，首先是代码的抽象层次太高了，想要推广的都是让开发人员几行代码就完成某某 AI 功能，这在 Demo 阶段是挺好用的，但是在实际开发中，只要业务一旦开始复杂，糟糕的代码设计带来了非常糟糕的编程体验。还有就是这几个项目都太想商业化了，忽略了整体生态的建设。&lt;/p&gt;
&lt;p&gt;还有一个就是 Vercel AI SDK，尽管个人觉得 Vercel AI SDK 代码抽象的比较好，但是也只是对于前端 UI 结合和部分 AI 功能的封装还不错，最大的问题是和 Nextjs 绑定太深了，对其它的框架和语言支持度不够。&lt;/p&gt;
&lt;p&gt;所以 Claude 推动 MCP 可以说是一个很好的时机，首先是 Claude Sonnet 3.5 在开发人员心中有较高的地位，而 MCP 又是一个开放的标准，所以很多公司和社区都愿意参与进来，希望 Claude 能够一直保持一个良好的开放生态。&lt;/p&gt;
&lt;p&gt;MCP 对于社区生态的好处主要是下面两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放标准给服务商，服务商可以针对 MCP 开放自己的 API 和部分能力。&lt;/li&gt;
&lt;li&gt;不需要重复造轮子，开发者可以用已有的开源 MCP 服务来增强自己的 Agent。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mcp-如何工作&#34;&gt;MCP 如何工作
&lt;/h2&gt;&lt;p&gt;那我们来介绍一下 MCP 的工作原理。首先我们看一下&lt;a class=&#34;link&#34; href=&#34;https://modelcontextprotocol.io/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方的 MCP 架构图&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/MCP.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Image 2: MCP 架构图&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;总共分为了下面五个部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MCP Hosts: Hosts 是指 LLM 启动连接的应用程序，像 Cursor, Claude Desktop、&lt;a class=&#34;link&#34; href=&#34;https://github.com/cline/cline&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cline&lt;/a&gt; 这样的应用程序。&lt;/li&gt;
&lt;li&gt;MCP Clients: 客户端是用来在 Hosts 应用程序内维护与 Server 之间 1:1 连接。&lt;/li&gt;
&lt;li&gt;MCP Servers: 通过标准化的协议，为 Client 端提供上下文、工具和提示。&lt;/li&gt;
&lt;li&gt;Local Data Sources: 本地的文件、数据库和 API。&lt;/li&gt;
&lt;li&gt;Remote Services: 外部的文件、数据库和 API。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;整个 MCP 协议核心的在于 Server，因为 Host 和 Client 相信熟悉计算机网络的都不会陌生，非常好理解，但是 Server 如何理解呢？&lt;/p&gt;
&lt;p&gt;看看 Cursor 的 AI Agent 发展过程，我们会发现整个 AI 自动化的过程发展会是从 Chat 到 Composer 再进化到完整的 AI Agent。&lt;/p&gt;
&lt;p&gt;AI Chat 只是提供建议，如何将 AI 的 response 转化为行为和最终的结果，全部依靠人类，例如手动复制粘贴，或者进行某些修改。&lt;/p&gt;
&lt;p&gt;AI Composer 是可以自动修改代码，但是需要人类参与和确认，并且无法做到除了修改代码之外的其它操作。&lt;/p&gt;
&lt;p&gt;AI Agent 是一个完全的自动化程序，未来完全可以做到自动读取 Figma 的图片，自动生产代码，自动读取日志，自动调试代码，自动 push 代码到 GitHub。&lt;/p&gt;
&lt;p&gt;而 MCP Server 就是为了实现 AI Agent 的自动化而存在的，它是一个中间层，告诉 AI Agent 目前存在哪些服务，哪些 API，哪些数据源，AI Agent 可以根据 Server 提供的信息来决定是否调用某个服务，然后通过 Function Calling 来执行函数。&lt;/p&gt;
&lt;h3 id=&#34;mcp-server-的工作原理&#34;&gt;MCP Server 的工作原理
&lt;/h3&gt;&lt;p&gt;我们先来看一个简单的例子，假设我们想让 AI Agent 完成自动搜索 GitHub Repository，接着搜索 Issue，然后再判断是否是一个已知的 bug，最后决定是否需要提交一个新的 Issue 的功能。&lt;/p&gt;
&lt;p&gt;那么我们就需要创建一个 Github MCP Server，这个 Server 需要提供查找 Repository、搜索 Issues 和创建 Issue 三种能力。&lt;/p&gt;
&lt;p&gt;我们直接来看看代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;81
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;82
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;83
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;84
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;85
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;86
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github-mcp-server&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;VERSION&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;capabilities&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setRequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ListToolsRequestSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;tools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;search_repositories&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Search for GitHub repositories&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;inputSchema&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;zodToJsonSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SearchRepositoriesSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;create_issue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Create a new issue in a GitHub repository&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;inputSchema&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;zodToJsonSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;issues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CreateIssueSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;search_issues&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Search for issues and pull requests across GitHub repositories&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;inputSchema&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;zodToJsonSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SearchIssuesSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setRequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CallToolRequestSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Arguments are required&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;search_repositories&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SearchRepositoriesSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchRepositories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;perPage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;JSON.stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;create_issue&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;issues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CreateIssueSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;issue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;issues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createIssue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;JSON.stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;issue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;search_issues&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SearchIssuesSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchIssues&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nx&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;JSON.stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Unknown tool: &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;runServer() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;transport&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;StdioServerTransport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;transport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;GitHub MCP Server running on stdio&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;runServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Fatal error in main():&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面的代码中，我们通过 &lt;code&gt;server.setRequestHandler&lt;/code&gt; 来告诉 Client 端我们提供了哪些能力，通过 &lt;code&gt;description&lt;/code&gt; 字段来描述这个能力的作用，通过 &lt;code&gt;inputSchema&lt;/code&gt; 来描述完成这个能力需要的输入参数。&lt;/p&gt;
&lt;p&gt;我们再来看看具体的实现代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SearchOptions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;q&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;order&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.enum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;asc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;desc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;per_page&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SearchIssuesOptions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SearchOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;extend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;sort&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.enum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;comments&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;]).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;searchUsers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.infer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;SearchUsersSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;githubRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;buildUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/search/users&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SearchRepositoriesSchema&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Search query (see GitHub search syntax)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Page number for pagination (default: 1)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;perPage&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;z.number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;describe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Number of results per page (default: 30, max: 100)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;searchRepositories&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;perPage&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.github.com/search/repositories&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;q&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;page&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;searchParams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;per_page&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;perPage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;githubRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GitHubSearchResponseSchema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以很清晰的看到，我们最终实现是通过了 &lt;code&gt;https://api.github.com&lt;/code&gt; 的 API 来实现和 Github 交互的，我们通过 &lt;code&gt;githubRequest&lt;/code&gt; 函数来调用 GitHub 的 API，最后返回结果。&lt;/p&gt;
&lt;p&gt;在调用 Github 官方的 API 之前，MCP 的主要工作是描述 Server 提供了哪些能力(给 LLM 提供)，需要哪些参数(参数具体的功能是什么)，最后返回的结果是什么。&lt;/p&gt;
&lt;p&gt;所以 MCP Server 并不是一个新颖的、高深的东西，它只是一个具有共识的协议。&lt;/p&gt;
&lt;p&gt;如果我们想要实现一个更强大的 AI Agent，例如我们想让 AI Agent 自动的根据本地错误日志，自动搜索相关的 GitHub Repository，然后搜索 Issue，最后将结果发送到 Slack。&lt;/p&gt;
&lt;p&gt;那么我们可能需要创建三个不同的 MCP Server，一个是 Local Log Server，用来查询本地日志；一个是 GitHub Server，用来搜索 Issue；还有一个是 Slack Server，用来发送消息。&lt;/p&gt;
&lt;p&gt;AI Agent 在用户输入 &lt;code&gt;我需要查询本地错误日志，将相关的 Issue 发送到 Slack&lt;/code&gt; 指令后，自行判断需要调用哪些 MCP Server，并决定调用顺序，最终根据不同 MCP Server 的返回结果来决定是否需要调用下一个 Server，以此来完成整个任务。&lt;/p&gt;
&lt;h2 id=&#34;如何使用-mcp&#34;&gt;如何使用 MCP
&lt;/h2&gt;&lt;p&gt;如果你还没有尝试过如何使用 MCP 的话，我们可以考虑用 Cursor(本人只尝试过 Cursor)，Claude Desktop 或者 Cline 来体验一下。&lt;/p&gt;
&lt;p&gt;当然，我们并不需要自己开发 MCP Servers，MCP 的好处就是通用、标准，所以开发者并不需要重复造轮子（但是学习可以重复造轮子）。&lt;/p&gt;
&lt;p&gt;首先推荐的是官方组织的一些 Server：&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方的 MCP Server 列表&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;目前社区的 MCP Server 还是比较混乱，有很多缺少教程和文档，很多的代码功能也有问题，我们可以自行尝试一下 &lt;a class=&#34;link&#34; href=&#34;https://cursor.directory/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cursor Directory&lt;/a&gt; 的一些例子，具体的配置和实战笔者就不细讲了，大家可以参考官方文档。&lt;/p&gt;
&lt;h2 id=&#34;mcp-的一些资源&#34;&gt;MCP 的一些资源
&lt;/h2&gt;&lt;p&gt;下面是个人推荐的一些 MCP 的资源，大家可以参考一下。&lt;/p&gt;
&lt;h3 id=&#34;mcp-官方资源&#34;&gt;MCP 官方资源
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方的开源组织 Model Context Protocol&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/%5Bmodelcontextprotocol%5D%5c%28https://modelcontextprotocol.io/introduction%5c%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方的文档 modelcontextprotocol&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方的 MCP Server 列表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.anthropic.com/news/model-context-protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Claude Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;社区的-mcp-server-的列表&#34;&gt;社区的 MCP Server 的列表
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://mcp.so/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MCP.so&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cursor.directory/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cursor Directory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.pulsemcp.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pulsemcp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://glama.ai/mcp/servers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Glama MCP Servers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后
&lt;/h2&gt;&lt;p&gt;本篇文章写的比较仓促，如果有错误再所难免，欢迎各位大佬指正。&lt;/p&gt;
&lt;p&gt;最后本篇文章可以转载，但是请注明出处，会在 &lt;a class=&#34;link&#34; href=&#34;https://x.com/iguangzhengli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;X/Twitter&lt;/a&gt;，&lt;a class=&#34;link&#34; href=&#34;https://www.xiaohongshu.com/user/profile/6076c9a2000000000101e862&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;小红书&lt;/a&gt;, 微信公众号同步发布，欢迎各位大佬关注一波。&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/gpt-embeddings/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://guangzhengli.com/blog/zh/gpt-embeddings/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.cursor.com/context/model-context-protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.cursor.com/context/model-context-protocol&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=Y_kaQmhGmZk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=Y_kaQmhGmZk&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://browsertools.agentdesk.ai/installation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://browsertools.agentdesk.ai/installation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/modelcontextprotocol&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/grafana/mcp-grafana&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/grafana/mcp-grafana&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/JetBrains/mcp-jetbrains&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/JetBrains/mcp-jetbrains&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/stripe/agent-toolkit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/stripe/agent-toolkit&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/rishikavikondala/mcp-server-aws&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/rishikavikondala/mcp-server-aws&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/sooperset/mcp-atlassian&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/sooperset/mcp-atlassian&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/v-3/google-calendar&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/v-3/google-calendar&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/Flux159/mcp-server-kubernetes&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/Flux159/mcp-server-kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/EnesCinr/twitter-mcp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/EnesCinr/twitter-mcp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ZubeidHendricks/youtube-mcp-server&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ZubeidHendricks/youtube-mcp-server&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.langchain.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.langchain.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.llamaindex.ai/en/stable/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.llamaindex.ai/en/stable/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://sdk.vercel.ai/docs/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://sdk.vercel.ai/docs/introduction&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://modelcontextprotocol.io/introduction&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://modelcontextprotocol.io/introduction&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/cline/cline&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/cline/cline&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/modelcontextprotocol/servers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/modelcontextprotocol/servers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.anthropic.com/news/model-context-protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.anthropic.com/news/model-context-protocol&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://cursor.directory/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://cursor.directory&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.pulsemcp.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.pulsemcp.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://glama.ai/mcp/servers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://glama.ai/mcp/servers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#%E4%B8%BA%E4%BB%80%E4%B9%88-mcp-%E6%98%AF%E4%B8%80%E4%B8%AA%E7%AA%81%E7%A0%B4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;为什么 MCP 是一个突破&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#mcp-%E5%AE%98%E6%96%B9%E9%9B%86%E6%88%90%E6%95%99%E5%AD%A6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MCP 官方集成教学：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#%EF%B8%8F-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B9%B3%E5%8F%B0%E5%AE%98%E6%96%B9%E6%94%AF%E6%8C%81-mcp-%E7%9A%84%E4%BE%8B%E5%AD%90&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;🎖️ 第三方平台官方支持 MCP 的例子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#-%E7%A4%BE%E5%8C%BA-mcp-%E6%9C%8D%E5%8A%A1%E5%99%A8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;🌎 社区 MCP 服务器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF-mcp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;为什么是 MCP？&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#function-calling&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Function Calling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#model-context-protocol-mcp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Model Context Protocol (MCP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#ai-agent&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AI Agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#%E6%80%9D%E8%80%83&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;思考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#mcp-%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MCP 如何工作&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#mcp-server-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MCP Server 的工作原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-mcp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;如何使用 MCP&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#mcp-%E7%9A%84%E4%B8%80%E4%BA%9B%E8%B5%84%E6%BA%90&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MCP 的一些资源&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#mcp-%E5%AE%98%E6%96%B9%E8%B5%84%E6%BA%90&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MCP 官方资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#%E7%A4%BE%E5%8C%BA%E7%9A%84-mcp-server-%E7%9A%84%E5%88%97%E8%A1%A8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;社区的 MCP Server 的列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;写在最后&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://guangzhengli.com/blog/zh/model-context-protocol#references&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;References&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MCPify.ai:一句话构建一个MCP</title>
        <link>https://ai.programnotes.cn/p/mcpify.ai%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AAmcp/</link>
        <pubDate>Mon, 24 Mar 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/mcpify.ai%E4%B8%80%E5%8F%A5%E8%AF%9D%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AAmcp/</guid>
        <description>&lt;img src="https://ai.programnotes.cn/img/ai/53502e707ea107f2427aa7249ed30c80.png" alt="Featured image of post MCPify.ai:一句话构建一个MCP" /&gt;&lt;p&gt;&lt;strong&gt;来源 | QOK AI&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/53502e707ea107f2427aa7249ed30c80.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;MCPify.ai是一个基于Model Context Protocol (MCP)构建的创新平台，允许用户快速创建能与Claude、Cursor等AI助手配合使用的定制化工具。它的核心价值在于让非技术人员也能轻松为AI助手扩展功能，而无需深入了解编程或MCP的技术细节。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术背景：MCP协议&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Model Context Protocol（MCP）是Anthropic在2024年11月推出的开源协议，旨在解决AI模型与外部工具、系统和数据源之间的连接问题。在MCP出现之前，AI系统往往被限制在预训练数据的范围内，而MCP允许AI助手接入实时数据和功能，显著扩展了它们的能力边界。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/eb56555fd3da7ad0ec4099d3601b7b61.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;图片&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MCPify的核心功能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MCPify的主要优势在于它极大地简化了MCP工具的创建过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;简单易用的界面：用户只需描述想要的功能，平台就能自动生成相应的MCP工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预设模板：提供多种常用工具模板，如智能计算器、天气API集成、金融工具包等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无代码解决方案：无需编写复杂代码，即可为AI助手创建功能扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;兼容性：生成的工具可以与支持MCP的各种AI应用无缝集成&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;降低了技术门槛：MCPify最大的亮点是它使MCP工具的创建民主化，让非技术人员也能参与AI功能扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;节省开发时间：对于开发者而言，使用MCPify可以大幅减少从概念到实现的时间，提高工作效率。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;MCPify的长期成功将取决于其对用户反馈的响应速度和MCP生态系统的整体发展。如果能持续改进用户体验，并加强与各种AI助手的集成，MCPify有潜力成为AI工具创建领域的领导者。&lt;/p&gt;
&lt;p&gt;对于考虑使用MCPify的团队，我建议从小规模试点开始，评估工具的实际表现和与现有系统的兼容性，然后再考虑更广泛的应用。特别是现在它处于免费阶段，正是尝试和学习的好时机。&lt;/p&gt;
&lt;p&gt;MCPify代表了AI工具创建的未来方向，通过简化MCP工具的开发过程，它为AI助手的功能扩展提供了一条低门槛的路径。虽然目前仍处于早期阶段，但其潜力巨大，值得产品经理和开发者关注。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MCP客户端|Claude 桌面应用</title>
        <link>https://ai.programnotes.cn/p/mcp%E5%AE%A2%E6%88%B7%E7%AB%AFclaude-%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/</link>
        <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/mcp%E5%AE%A2%E6%88%B7%E7%AB%AFclaude-%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/</guid>
        <description>&lt;p&gt;&lt;strong&gt;核心内容点:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过模型上下文协议(MCP)实现与 Claude AI 模型的无缝交互。&lt;/li&gt;
&lt;li&gt;支持多种高级功能，帮助用户在日常工作中提升效率。&lt;/li&gt;
&lt;li&gt;可以通过配置 MCP 服务器扩展功能，例如文件操作、数据处理等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一款通过模型上下文协议与 Claude AI 交互的强大桌面应用程序。&lt;/p&gt;
&lt;p&gt;Claude 桌面应用是 Anthropic 公司推出的官方客户端软件，通过模型上下文协议(MCP)实现与 Claude AI 模型的无缝交互。作为一款功能强大的 AI 助手工具，它不仅提供了原生桌面体验，还支持多种高级功能，帮助用户在日常工作中提升效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mcp.programnotes.cn/images/claude-desktop-ui.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Claude Desktop UI&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;核心功能详解&#34;&gt;核心功能详解
&lt;/h2&gt;&lt;h3 id=&#34;原生桌面体验&#34;&gt;原生桌面体验
&lt;/h3&gt;&lt;p&gt;Claude 桌面应用针对不同操作系统进行了专门优化，提供了比网页版更加流畅的使用体验：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;键盘快捷键支持&lt;/strong&gt;：提供丰富的快捷键组合，如创建新对话、搜索内容、撤销操作等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统集成&lt;/strong&gt;：与操作系统深度集成，支持通知推送、剪贴板操作等系统功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;离线会话存储&lt;/strong&gt;：对话历史保存在本地，确保数据安全和快速访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模型上下文协议mcp支持&#34;&gt;模型上下文协议(MCP)支持
&lt;/h3&gt;&lt;p&gt;作为 MCP 的官方实现客户端，Claude 桌面应用支持通过协议扩展 AI 的能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;服务器连接&lt;/strong&gt;：可配置连接到各种 MCP 服务器，扩展 Claude 的功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工具使用&lt;/strong&gt;：支持通过 MCP 协议调用各种工具，如文件系统操作、网络搜索等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上下文管理&lt;/strong&gt;：能够有效管理对话上下文，提高模型理解能力&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;多模型支持&#34;&gt;多模型支持
&lt;/h3&gt;&lt;p&gt;Claude 桌面应用提供对 Anthropic 全系列模型的访问：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Claude 3 Opus&lt;/strong&gt;：最强大的模型，适合复杂推理和创意工作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Claude 3 Sonnet&lt;/strong&gt;：平衡了性能和速度的模型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Claude 3 Haiku&lt;/strong&gt;：响应速度最快的模型，适合日常对话&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;文件处理能力&#34;&gt;文件处理能力
&lt;/h3&gt;&lt;p&gt;Claude 桌面应用支持处理多种文件格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文档阅读&lt;/strong&gt;：支持 PDF、Word、Excel 等文档的上传和分析&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图像处理&lt;/strong&gt;：能够理解和描述上传的图片内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码分析&lt;/strong&gt;：支持多种编程语言的代码理解和优化&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;批量处理&lt;/strong&gt;：可以同时上传多个文件进行分析&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安装与设置指南&#34;&gt;安装与设置指南
&lt;/h2&gt;&lt;h3 id=&#34;下载与安装&#34;&gt;下载与安装
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;访问&lt;a class=&#34;link&#34; href=&#34;https://claude.ai/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方下载页面&lt;/a&gt;获取安装程序&lt;/li&gt;
&lt;li&gt;根据您的操作系统选择相应版本：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;：下载并运行.exe 安装文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;：下载.dmg 文件，将应用拖到应用程序文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;首次启动时，按照向导完成账号登录和初始设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;配置-mcp-服务器&#34;&gt;配置 MCP 服务器
&lt;/h3&gt;&lt;p&gt;Claude 桌面应用的独特优势在于可以通过配置 MCP 服务器扩展功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 Claude 菜单并选择&amp;quot;设置&amp;quot;&lt;/li&gt;
&lt;li&gt;在设置面板左侧选择&amp;quot;开发者&amp;quot;&lt;/li&gt;
&lt;li&gt;点击&amp;quot;编辑配置&amp;quot;打开配置文件&lt;/li&gt;
&lt;li&gt;配置文件位置：
&lt;ul&gt;
&lt;li&gt;macOS: &lt;code&gt;~/Library/Application Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Windows: &lt;code&gt;%APPDATA%\Claude\claude_desktop_config.json&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;文件系统服务器示例配置&#34;&gt;文件系统服务器示例配置
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;mcpServers&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;filesystem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;npx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;args&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;-y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;@modelcontextprotocol/server-filesystem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;/Users/用户名/桌面&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s2&#34;&gt;&amp;#34;/Users/用户名/下载&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;配置完成后重启 Claude 桌面应用，您将在输入框右下角看到工具图标，表示服务器已连接成功。&lt;/p&gt;
&lt;h2 id=&#34;高级使用技巧&#34;&gt;高级使用技巧
&lt;/h2&gt;&lt;h3 id=&#34;工具调用&#34;&gt;工具调用
&lt;/h3&gt;&lt;p&gt;启用 MCP 服务器后，Claude 可以执行各种操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;文件操作&lt;/strong&gt;：阅读、创建、移动或删除文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件搜索&lt;/strong&gt;：在指定目录中查找特定文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码生成&lt;/strong&gt;：直接将生成的代码保存到文件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据处理&lt;/strong&gt;：分析本地文件中的数据并生成报告&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每次工具调用前，Claude 都会请求您的确认，确保安全性。&lt;/p&gt;
&lt;h3 id=&#34;会话管理&#34;&gt;会话管理
&lt;/h3&gt;&lt;p&gt;Claude 桌面应用提供了高效的会话管理功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多会话支持&lt;/strong&gt;：同时维护多个独立对话&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会话导出&lt;/strong&gt;：将对话内容导出为多种格式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;历史搜索&lt;/strong&gt;：快速检索历史对话内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会话继续&lt;/strong&gt;：随时恢复之前的对话上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快捷键优化&#34;&gt;快捷键优化
&lt;/h3&gt;&lt;p&gt;掌握以下快捷键可提高使用效率：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+N&lt;/strong&gt;：创建新对话&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+S&lt;/strong&gt;：保存当前对话&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+F&lt;/strong&gt;：搜索对话内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+Z&lt;/strong&gt;：撤销上一步操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ctrl+/+?&lt;/strong&gt;：显示快捷键帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用场景示例&#34;&gt;应用场景示例
&lt;/h2&gt;&lt;h3 id=&#34;开发辅助&#34;&gt;开发辅助
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;代码审查与优化&lt;/li&gt;
&lt;li&gt;API 文档生成&lt;/li&gt;
&lt;li&gt;调试问题分析&lt;/li&gt;
&lt;li&gt;项目架构设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内容创作&#34;&gt;内容创作
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;文章撰写与编辑&lt;/li&gt;
&lt;li&gt;创意构思与头脑风暴&lt;/li&gt;
&lt;li&gt;内容翻译与本地化&lt;/li&gt;
&lt;li&gt;市场文案创作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据分析&#34;&gt;数据分析
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;本地数据文件分析&lt;/li&gt;
&lt;li&gt;数据可视化建议&lt;/li&gt;
&lt;li&gt;报告生成与总结&lt;/li&gt;
&lt;li&gt;数据洞察提取&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;学习辅助&#34;&gt;学习辅助
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;概念解释与学习辅导&lt;/li&gt;
&lt;li&gt;研究材料总结&lt;/li&gt;
&lt;li&gt;学习计划制定&lt;/li&gt;
&lt;li&gt;知识图谱构建&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统要求&#34;&gt;系统要求
&lt;/h2&gt;&lt;h3 id=&#34;windows&#34;&gt;Windows
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Windows 10 或更新版本（64 位）&lt;/li&gt;
&lt;li&gt;4GB RAM（推荐 8GB 以上）&lt;/li&gt;
&lt;li&gt;500MB 可用存储空间&lt;/li&gt;
&lt;li&gt;宽带网络连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;macos&#34;&gt;macOS
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;macOS 11 (Big Sur) 或更新版本&lt;/li&gt;
&lt;li&gt;4GB RAM（推荐 8GB 以上）&lt;/li&gt;
&lt;li&gt;500MB 可用存储空间&lt;/li&gt;
&lt;li&gt;宽带网络连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;开发环境要求用于-mcp-服务器&#34;&gt;开发环境要求（用于 MCP 服务器）
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Node.js 环境&lt;/li&gt;
&lt;li&gt;NPM 包管理器&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语
&lt;/h2&gt;&lt;p&gt;Claude 桌面应用通过实现模型上下文协议，将 AI 助手能力与本地系统无缝集成，为用户提供了一个功能强大且灵活的智能助手工具。无论是日常工作、开发编程还是创意写作，它都能显著提升效率和体验。通过合理配置和使用 MCP 服务器，您可以根据自己的需求进一步扩展 Claude 的能力，创造更多可能性。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
