<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>AI Workflow on AI</title>
        <link>https://ai.programnotes.cn/tags/ai-workflow/</link>
        <description>Recent content in AI Workflow on AI</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-CN</language>
        <lastBuildDate>Tue, 29 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://ai.programnotes.cn/tags/ai-workflow/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>斩获86K Star！最强开源MCP平台【双向&#43;本地MCP】自由度拉满，太绝了～</title>
        <link>https://ai.programnotes.cn/p/%E6%96%A9%E8%8E%B786k-star%E6%9C%80%E5%BC%BA%E5%BC%80%E6%BA%90mcp%E5%B9%B3%E5%8F%B0%E5%8F%8C%E5%90%91-%E6%9C%AC%E5%9C%B0mcp%E8%87%AA%E7%94%B1%E5%BA%A6%E6%8B%89%E6%BB%A1%E5%A4%AA%E7%BB%9D%E4%BA%86/</link>
        <pubDate>Tue, 29 Apr 2025 00:00:00 +0000</pubDate>
        
        <guid>https://ai.programnotes.cn/p/%E6%96%A9%E8%8E%B786k-star%E6%9C%80%E5%BC%BA%E5%BC%80%E6%BA%90mcp%E5%B9%B3%E5%8F%B0%E5%8F%8C%E5%90%91-%E6%9C%AC%E5%9C%B0mcp%E8%87%AA%E7%94%B1%E5%BA%A6%E6%8B%89%E6%BB%A1%E5%A4%AA%E7%BB%9D%E4%BA%86/</guid>
        <description>&lt;p&gt;&lt;strong&gt;核心内容:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n8n支持双向MCP，既可以作为客户端使用MCP-Server，也可以作为服务端发布MCP-Server。&lt;/li&gt;
&lt;li&gt;n8n集成了1500+工具和模板，支持通过SSE远程连接外部MCP-Server，例如高德地图MCP-Server。&lt;/li&gt;
&lt;li&gt;n8n通过安装社区节点，可以支持本地MCP-Server的使用，并通过配置两个Tool节点实现MCP工具的列出和执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;源自&lt;/strong&gt; |  袋鼠帝袋鼠帝AI客栈 2025-04-29 00:58&lt;/p&gt;
&lt;p&gt;开源项目n8n,最强开源AI workflow平台,这么快（半个月）就从75K Star干到86K Star了？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/5c48964d4811c53cdbdc4b275f70d567.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;最关键的是，在最近的1.88.0版本，n8n终于官宣支持MCP了！&lt;/p&gt;
&lt;p&gt;而且它不仅支持双向MCP，还支持添加本地（stdio）MCP。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/bfae6707d7f0ccb44c6b9a44ecb63b3b.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/b799293236152650dea3b1eb890fad0d.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;双向MCP：既可以作为MCP客户端，去添加使用各种MCP-Server。又可以作为MCP服务端，发布MCP-Server供其他客户端使用。&lt;/p&gt;
&lt;p&gt;MCP-Server目前有两种使用方式，一种是把MCP-Server的工具集成到本地使用，一种是远程调用。而n8n两种都支持了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/932b35af2c9bc485d1d6c797b2c9cac8.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;加之n8n是最强AI Workflow出身，本身就集成了1500+工具和模板。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;n8n工作流用法&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;袋鼠帝，公众号：袋鼠帝AI客栈&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s/jC_bPFcha-SZmBO_EMGJMg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DeepSeek+开源n8n打造24h推特(X)热点监控Workflow，太绝了！【附赠：完整工作流】&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;现在n8n支持MCP，拥抱MCP生态后，更是有上万的MCP-Server可随意接入，我愿称之为最强开源MCP平台。&lt;/p&gt;
&lt;p&gt;注意：n8n是平台，而不仅仅是Cusor、Trae、Cherry Studio等 的MCP客户端。&lt;/p&gt;
&lt;p&gt;区别在于MCP客户端只是安装在电脑上的客户端软件，只能在本地添加使用MCP-Server，但无法对外提供服务。&lt;/p&gt;
&lt;p&gt;而n8n是可部署的Web服务（比如通过docker部署），可以部署到云服务器，不管是制作的MCP-Server，亦或是开发的MCP应用，都可以一键发布到公网，对外提供服务。&lt;/p&gt;
&lt;p&gt;好了，话不多说，接下来我们一起看看，在n8n上如何使用MCP。&lt;/p&gt;
&lt;p&gt;PS：本期所有工作流文件都可以在公众号后台私信：“n8n-mcp” 获取&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0ec84596510133a5d4a1d6f1c2bdd11e.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;部署新版n8n&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0ec84596510133a5d4a1d6f1c2bdd11e.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;咱们本次还是用docker-compose一键部署&lt;/p&gt;
&lt;p&gt;目前n8n的最新版是1.90.2&lt;/p&gt;
&lt;p&gt;先创建一个docker-compose.yml文件（空格和缩进要严格按照下面yml文件格式来哦，不能乱改）&lt;/p&gt;
&lt;p&gt;docker-compose.yml文件内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;l&#34;&gt;name: &amp;#39;n8n&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;n8n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;n8nio/n8n:1.90.2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;container_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;n8n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;always&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;-&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;5678:5678&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;n8n_data:/home/node/.n8n&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;NODE_ENV=production&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;N8N_SECURE_COOKIE=false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;N8N_HOST=你的外网IP/域名&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 可以根据需要添加其他环境变量&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;n8n_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;external: true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接下来就是进入docker-compose.yml文件所在路径的控制台/终端&lt;/p&gt;
&lt;p&gt;通过docker-compose up -d 命令 一键部署（或更新）&lt;/p&gt;
&lt;p&gt;如下图，就是部署成功了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1a72e1672d0e8affc6b83237c1f93ccc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;不过要注意，镜像是在国外，需要开启科学上网。&lt;/p&gt;
&lt;p&gt;没有科学上网的朋友，可以参考这篇&lt;a class=&#34;link&#34; href=&#34;https://mp.weixin.qq.com/s?__biz=MzkwMzE4NjU5NA==&amp;amp;mid=2247506421&amp;amp;idx=1&amp;amp;sn=240d895a1b03de12d1035cc186e142ab&amp;amp;scene=21#wechat_redirect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;部署dify&lt;/a&gt;
的方案。&lt;/p&gt;
&lt;p&gt;成功之后直接浏览器访问：&lt;/p&gt;
&lt;p&gt;http://127.0.0.1:5678&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1724290ac2e91612f2ad954494946044.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0ec84596510133a5d4a1d6f1c2bdd11e.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;n8n的双向MCP&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0ec84596510133a5d4a1d6f1c2bdd11e.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;n8n在1.88.0版本就支持了向MCP客服端提供MCP-Server工具的功能&lt;/p&gt;
&lt;p&gt;同时也支持通过SSE远程使用外部的MCP-Server&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e03cdb30111f308da78392785c0c3eab.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我将通过两个例子教大家怎么用&lt;/p&gt;
&lt;p&gt;首先是通过SSE远程连接外部MCP-Server（以高德地图MCP-Server为例）&lt;/p&gt;
&lt;p&gt;我们先创建一个工作流（如下图）&lt;/p&gt;
&lt;p&gt;通过聊天触发，添加一个AI Agent节点，配置好大模型（这里我配置的DeepSeek V3），memory有没有都可以。&lt;/p&gt;
&lt;p&gt;注意：n8n里面只有支持funcation call的大模型才能使用MCP&lt;/p&gt;
&lt;p&gt;然后点击AI Agent中Tool的加号&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/8a884be604d07f16f96a78c76256aaac.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;添加MCP Client Tool&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/1102f6afa744db5bd6414810b8e98ea1.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;高德的MCP-Server的SSE地址&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://mcp.amap.com/sse?key=&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mcp.amap.com/sse?key=&lt;/a&gt;在高德官网上申请的key&lt;/p&gt;
&lt;p&gt;获取高德的key&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://console.amap.com/dev/key/app&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://console.amap.com/dev/key/app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/c5c1b0e1c18c3fbca66ff1c82104fad9.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;配置MCP Client Tool&lt;/p&gt;
&lt;p&gt;把高德的MCP-Server的SSE地址填上去&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/3e173c01185b0d9c9ed716b555301556.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;就ok啦&lt;/p&gt;
&lt;p&gt;我们测试一下&lt;/p&gt;
&lt;p&gt;通过chat发送消息（下图），可以看到成功的调用了高德MCP&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e4afddc4ffa8f88e72cb4b2cee4d8230.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;然后我们制作一个对外提供SSE调用的MCP-Server&lt;/p&gt;
&lt;p&gt;向MCP客服端提供MCP-Server工具&lt;/p&gt;
&lt;p&gt;另外新建一个工作流在触发节点选择使用 MCP Server Trigger&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/3a9207e7f6ed9a7de0b62a1d5997ef9f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，MCP Server Trigger这里提供可外部访问的SSE地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/74de3c6bb0b6695a54e5b297768a9457.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;接下来咱们只需要把想要提供出去的工具、工作流、Agent等添加到这个MCP Server Trigger节点后就行。&lt;/p&gt;
&lt;p&gt;不过我们的n8n目前是部署在本地电脑上的，无法提供外网访问，这时需要用到内网穿透技术。&lt;/p&gt;
&lt;p&gt;也没有多复杂，咱们安装一个提供内网穿透功能的软件：贝锐花生壳&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://hsk.oray.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hsk.oray.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装完毕，打开花生壳，点击增加映射&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/ec399d9da3777f392b428f9e36d2835c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;按照下图进行配置&lt;/p&gt;
&lt;p&gt;注意：如果不成功可能需要先去花生壳网页进行实名认证等操作&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/068a2b6f19c76442390f5dd488a247be.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;先在浏览器访问一下这个外网域名，如果能正常访问到本地的n8n就代表内网穿透配置成功！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/5c1d585f28d4f1af9e877cf70a28f0ae.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们需要再看一下这个外网域名的端口，因为设置的时候是随机端口，所以需要创建出来才知道。&lt;/p&gt;
&lt;p&gt;可以看到我随机到的外网端口是29764&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/7bb2d62d2734b45cddaa2ea530f28509.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;然后编辑一下，把内网端口和外网端口改成一样，保存&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/be5dc1004f9ad146bb16af9dcbd45121.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;修改docker-compose.yml配置&lt;/p&gt;
&lt;p&gt;重点看下图红框中的配置&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/bfae6707d7f0ccb44c6b9a44ecb63b3b.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/b799293236152650dea3b1eb890fad0d.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;N8N_HOST=外网域名&lt;/p&gt;
&lt;p&gt;增加- N8N_PORT=29746&lt;/p&gt;
&lt;p&gt;把ports的值也都改成29746&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/932b35af2c9bc485d1d6c797b2c9cac8.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/a2945f749e3a4f864e0b8cbe1be70dbc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;PS：因为这里花生壳给的外网端口是随机的，无法指定5678，所以只能把n8n的端口都改了，改成跟花生壳提供的一致。&lt;/p&gt;
&lt;p&gt;保存之后，我们再一次在docker-compose.yml所在路径的控制台/终端执行docker-compose up -d，目前是让修改的配置生效&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e3a6c995d5270a107617c4e6c55387b3.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这时再打开MCP Server Trigger，这里显示的SSE地址就变成外网可访问的地址了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/763105f1974e789b2c9bacc913cc87dd.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;点击MCP Server Trigger的加号&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/6b3ecd5c41d58efe9eb79422bca16f00.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;这里可以添加任何工具、工作流、Agent等等&amp;hellip;&lt;/p&gt;
&lt;p&gt;比如咱们可以把刚刚制作的MCP工作流添加上去&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/539de57e2631fe00cd10baa76d4ea006.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;调试好之后，记得保存和激活&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/d57e9d33f40c631422b249ff03dbeef7.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;点开MCP Server Trigger，复制SSE地址&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/274d8ff8bdbb5d446e317a5e5f42ddfa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;就可以在其他MCP客户端添加使用啦&lt;/p&gt;
&lt;p&gt;比如在Cherry Studio中添加使用&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/e4e8d1f67aa2a990b7a47023f558c254.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0ec84596510133a5d4a1d6f1c2bdd11e.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;n8n集成本地MCP&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/0ec84596510133a5d4a1d6f1c2bdd11e.&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;实际上，n8n官方的MCP，只支持通过SSE调用远程的MCP-Server使用。&lt;/p&gt;
&lt;p&gt;要使用本地的MCP-Server，需要用到n8n的社区节点。&lt;/p&gt;
&lt;p&gt;点击左下角头像-&amp;gt;setting-&amp;gt;community nodes输入n8n-nodes-mcp，点击install（安装）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/532e3fe902796661b81c576c70f3fe3f.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;30秒左右，mcp的社区节点就安装完成了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/9d3b1792e6332a07636b9edf85d6cf35.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;我们可以在刚才制作的第一个工作流上测试&lt;/p&gt;
&lt;p&gt;点击Tool的加号，在右边
搜索mcp，可以看到有两个MCP Client Tool节点&lt;/p&gt;
&lt;p&gt;其中，后面带有一个小盒子图标的就是刚刚安装的社区MCP节点&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/78735fca5d89752f674103a6c15ca40d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;点开之后，进入配置页面,点击Create new credential&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/cef98e514dc98f7a3ee89fe228a39a18.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;参考下图的方式进行配置，这里我们添加了一个firecrawl-mcp&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/927ec4df47f054707a78b101cd6a73aa.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;配置完，别忘了保存，也可以给这个MCP凭证改写名字&lt;/p&gt;
&lt;p&gt;操作我们选择List Tools（列出MCP工具）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/3941fda0525d235fd35598e7fb627406.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;然后再添加一个本地MCP，操作选择Execute Tool（执行工具），配置如下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/f9658b218c8e9e842b72eaa2953e5833.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Tool Name是固定写法（表示让大模型自己选择）&lt;/p&gt;
&lt;p&gt;{{ $fromAI(&amp;rsquo;toolname&amp;rsquo;) }}&lt;/p&gt;
&lt;p&gt;Tool Parameters也是固定写法（让大模型自己组装参数）&lt;/p&gt;
&lt;p&gt;{{ $fromAI(&amp;lsquo;Tool_Parameters&amp;rsquo;, &amp;lsquo;&amp;rsquo;, &amp;lsquo;json&amp;rsquo;) }}&lt;/p&gt;
&lt;p&gt;最后测试成功～&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ai.programnotes.cn/img/ai/373d1aea03a2b6f87cd967c5c17bccfc.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;一个MCP需要添加两个Tool节点，一个是列出该MCP-Server下所有的工具，另一个是让大模型选择合适的工具执行。&lt;/p&gt;
&lt;p&gt;「写在最后」&lt;/p&gt;
&lt;p&gt;本文介绍了n8n的MCP使用方式&lt;/p&gt;
&lt;p&gt;n8n既可以作为MCP-Server对外提供服务&lt;/p&gt;
&lt;p&gt;又可以作为MCP-Client添加SSE远程MCP-Server，或者本地MCP-Server使用。&lt;/p&gt;
&lt;p&gt;可以说自由度拉满了，这套组合，可以搭配任意的MCP，实现各种高度定制化的需求。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
